<?php

/**
 * Implements hook_simple_validator_info().
 * Тестовый валидатор.
 */
function simple_validate_simple_validator_info(){
  $items = array();
  $items[] = array(
    'type' => 'text',
    'title' => t('Exclamation point'),
    'description' => t('It prohibits use more than one exclamation point in a row.'),
    'name' => 'exclamation_point',
    'callback' => 'exclamation_point_callback',
  );
  $items[] = array(
    'type' => 'text',
    'title' => t('Caps Lock'),
    'description' => t('Prohibits the use of stricter caps.'),
    'name' => 'caps_lock',
    'callback' => 'caps_lock_callback',
  );
  $items[] = array(
    'type' => 'text',
    'title' => 'Срочно',
    'description' => 'Запрет на слово "СРОЧНО"',
    'name' => 'simple_srochno',
    'callback' => 'simple_srochno_callback',
  );
  return $items;
}

function simple_srochno_callback($field, $field_name, $entity, &$message){
  $values = array();
  $valid = array();
  if($field_name == 'title'){
    $values[] = $field;
    $label = t('Title');
  }
  else{
    $info = field_info_instance('node', $field_name, $entity->type);
    $label = $info['label'];
    if(!empty($field['und'])){
      foreach($field['und'] as $field_value){
        $values[] = $field_value['value'];
      }
    }
  }
  
  foreach($values as $value){
    if(preg_match('/срочно/ui', $value)){
      $valid[] = FALSE;
    }
  }
  
  if(in_array(FALSE, $valid)){
    $message = t('Field "@field" isn\'t valid!', array('@field' => $label));
    return FALSE;
  }
  else{
    return TRUE;
  }
}

function exclamation_point_callback($field, $field_name, $entity, &$message){
  $values = array();
  $valid = array();
  if($field_name == 'title'){
    $values[] = $field;
    $label = t('Title');
  }
  else{
    $info = field_info_instance('node', $field_name, $entity->type);
    $label = $info['label'];
    if(!empty($field['und'])){
      foreach($field['und'] as $field_value){
        $values[] = $field_value['value'];
      }
    }
  }
  
  foreach($values as $value){
    if(preg_match('/!!/', $value)){
      $valid[] = FALSE;
    }
  }
  
  if(in_array(FALSE, $valid)){
    $message = t('Field "@field" isn\'t valid! Do not use more than one exclamation point in a row.', array('@field' => $label));
    return FALSE;
  }
  else{
    return TRUE;
  }
}

function caps_lock_callback($field, $field_name, $entity, &$message){
  $values = array();
  $valid = array();
  if($field_name == 'title'){
    $values[] = $field;
    $label = t('Title');
  }
  else{
    $info = field_info_instance('node', $field_name, $entity->type);
    $label = $info['label'];
    if(!empty($field['und'])){
      foreach($field['und'] as $field_value){
        $values[] = $field_value['value'];
      }
    }
  }
  
  foreach($values as $value){
    $caps_words = preg_match_all('/[A-ZА-ЯЁ]{2,}/u', $value, $caps_words_matches);
    $words = preg_match_all('/[\w\d]+/u', $value, $words_matches);
    if(count($caps_words_matches[0]) == count($words_matches[0])){
      $valid[] = FALSE;
    }
  }
  
  if(in_array(FALSE, $valid)){
    $message = t('Field "@field" isn\'t valid! Do not use just stricter caps.', array('@field' => $label));
    return FALSE;
  }
  else{
    return TRUE;
  }
}