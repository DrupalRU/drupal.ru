<?php

/**
 * @file
 */

/**
 * Implements hook_permission().
 */
function dru_claim_permission() {
  return [
    'create claim' => [
      'title' => t('Create Claim'),
      'description' => t('Allow users to create claim'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function dru_claim_menu() {
  $items['ticket/node/nojs/%node/%'] = [
    'page callback' => 'dru_claim_node',
    'file' => 'dru_claim.pages.inc',
    'page arguments' => [2, 3, 4],
    'access arguments' => array(3),
    'access callback' => 'dru_claim_create_access',
    'type' => MENU_CALLBACK,
  ];
  $items['ticket/node/ajax/%node/%'] = [
    'page callback' => 'dru_claim_node',
    'file' => 'dru_claim.pages.inc',
    'page arguments' => [2, 3, 4],
    'access arguments' => array(3),
    'access callback' => 'dru_claim_create_access',
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  ];
  $items['ticket/comment/nojs/%comment/%'] = [
    'page callback' => 'dru_claim_comment',
    'file' => 'dru_claim.pages.inc',
    'page arguments' => [2, 3, 4],
    'access arguments' => array(3),
    'access callback' => 'dru_claim_create_access',
    'type' => MENU_CALLBACK,
  ];
  $items['ticket/comment/ajax/%comment/%'] = [
    'page callback' => 'dru_claim_comment',
    'file' => 'dru_claim.pages.inc',
    'page arguments' => [2, 3, 4],
    'access arguments' => array(3),
    'access callback' => 'dru_claim_create_access',
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Access callback for dru_claim_menu().
 */
function dru_claim_create_access($entity) {
  if ($entity->type) {
    $nodetype = $entity->type;
  }
  else {
    $nodetype = $entity->node_type ? substr($entity->node_type, strlen('comment_node_')) : NULL;
  }
  return user_access('create claim') && (!$nodetype ?: variable_get('dru_claim_allow_for_node_' . $nodetype));
}

/**
 * Implements hook_preprocess_node().
 */
function dru_claim_preprocess_node(&$vars) {
  if (!empty($vars['claim'])) {
    $vars['classes_array'][] = 'dru-claim-process node-claim';
  }
}

/**
 * Implements hook_node_view().
 */
function dru_claim_node_view($node, $view_mode) {
  drupal_add_css(drupal_get_path('module', 'dru_claim') . '/dru_claim.css');

  if ($node->type == 'ticket') {
    $claim = db_select('ticket_claim', 't')
      ->fields('t')
      ->condition('t.ticket_id', $node->nid, '=')
      ->execute()
      ->fetchObject();

    if (!empty($claim)) {
      $initiator = user_load($claim->init_uid);
      $node->content['initiator'] = [
        '#markup' => '<div class="initiator">
            <div class="label">' . t('Initiator') . ':</div>
            <div class="value">' . l($initiator->name, 'user/' . $initiator->uid) . '</div>
          </div>',
      ];

      if ($claim->content_type == 'node') {
        $original = node_load($claim->content_id);
        $original_format = $original->body[LANGUAGE_NONE][0]['format'];
        $original_text = $original->body[LANGUAGE_NONE][0]['value'];
        $original_title = l($original->title, 'node/' . $claim->content_id);
      }
      else {
        $original = comment_load($claim->content_id);
        $original_format = $original->comment_body[LANGUAGE_NONE][0]['format'];
        $original_text = $original->comment_body[LANGUAGE_NONE][0]['value'];
        $original_title = l($original->subject, 'comment/' . $claim->content_id, ['fragment' => 'comment-' . $claim->content_id]);
      }

      if ($view_mode == 'full') {
        $node->content['entity'] = [
          '#markup' => '<div class="entity claimed-entity claimed-entity-full">
            <div class="label claim-entity-label">' . t('Entity') . ':</div>
            <div class="value claimed-entity-value">' . $original_title . check_markup($original_text, $original_format) . '</div>
          </div>',
        ];
      }
      else {
        $node->content['entity'] = [
          '#markup' => '<div class="entity claimed-entity claimed-entity-teaser">
            <div class="label claim-entity-label">' . t('Entity') . ':</div>
            <div class="value claimed-entity-value">' . $original_title . '</div>
          </div>',
        ];
      }
    }

  }

  // Add node links.
  if ($node->type != 'ticket' && user_access('create claim')) {
    drupal_add_js(drupal_get_path('module', 'dru_tickets') . '/dru_tickets.js');

    drupal_add_library('system', 'drupal.ajax');
    $token = drupal_get_token('dru_claim');

    if (isset($node->claim) && $node->claim == 0 && variable_get('dru_claim_allow_for_node_' . $node->type)) {
      $node->content['links']['comment']['#links']['dru-claim'] = [
        'title' => t('Claim'),
        'href' => 'ticket/node/nojs/' . $node->nid . '/' . $token,
        'query' => drupal_get_destination(),
        'attributes' => [
          'class' => ['use-ajax', 'claim-node-' . $node->nid],
        ],
      ];
    }
  }

  // View claim verdict.
  if (user_is_logged_in()) {
    if (isset($node->claim) && $node->claim && $ticket = node_load($node->claim)) {
      $node->content += dru_claim_get_ticket_info($ticket, $node, 'node');
    }
  }
}

/**
 * Get body with ticket info.
 */
function dru_claim_get_ticket_info($ticket, $entity, $entity_type) {
  $output = [];

  $has_verdict = $ticket->ticket->ticket_verdict;
  $icon = $has_verdict ? 'gavel' : 'balance-scale fa-pulse';
  $class = $has_verdict ? 'claim_message_done' : 'claim_message_processed';
  $verdict = $has_verdict ?: t('Claim is under review');

  $ticket_author = user_load($ticket->uid);
  $ticket_category = taxonomy_term_load($ticket->field_claim_category['und'][0]['tid']);

  $ticket_body = $ticket_icon = '';
  if (!empty($ticket->body['und'][0]['value'])) {
    $ticket_icon = '<i class="fa fa-commenting-o"></i>';
    $ticket_body .= $ticket->body['und'][0]['value'];;
  }

  $output['claim'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['claim_message', $class],
    ],
    'icon' => [
      '#markup' => '<i class="fa fa-' . $icon . '"></i>',
      '#prefix' => '<span class="icon-wrapper">',
      '#suffix' => '</span>',
    ],
    'verdict' => [
      '#markup' => $verdict,
    ],
  ];

  $output['ticket'] = [
    '#type' => 'container',
    '#has_verdict' => !!$has_verdict,
    '#attributes' => [
      'class' => ['ticket-info'],
    ],
  ];
  $output['ticket']['description'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['ticket-body'],
    ],
    'icon' => [
      '#markup' => $ticket_icon,
    ],
    'content' => [
      '#markup' => $ticket_body,
    ],
  ];
  $output['ticket']['category'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['ticket-category'],
    ],
    'icon' => [
      '#markup' => '<i class="fa fa-exclamation-triangle"></i>',
    ],
    'content' => [
      '#markup' => $ticket_category->name,
    ],
  ];
  $output['ticket']['metadata'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['ticket-metadata'],
    ],
  ];
  $output['ticket']['metadata']['created'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['ticket-created'],
    ],
    'icon' => [
      '#markup' => '<i class="fa fa-calendar"></i>',
    ],
    'content' => [
      '#markup' => date('d.m.Y', $ticket->created),
    ],
  ];
  $output['ticket']['metadata']['ticket-link'] = [
    '#type' => 'container',
    // For the future, when will need to hide ticket and link from unaccessed users.
    '#access' => TRUE,
    '#attributes' => [
      'class' => ['ticket-id'],
    ],
    'icon' => [
      '#markup' => '<i class="fa fa-eye"></i>',
    ],
    'content' => [
      '#theme' => 'link',
      '#path' => 'node/' . $ticket->nid,
      '#text' => t('Open ticket'),
      // A bug of Drupal, which disallows
      // to create links without define attributes.
      '#options' => array(
        'html' => FALSE,
        'attributes' => array(),
      ),
    ],
  ];
  $output['ticket']['metadata']['author'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['ticket-author'],
    ],
    'icon' => [
      '#markup' => '<i class="fa fa-user"></i>',
    ],
    'content' => [
      '#theme' => 'link',
      '#path' => 'user/' . $ticket_author->uid,
      '#text' => $ticket_author->name,
      // A bug of Drupal, which disallows
      // to create links without define attributes.
      '#options' => array(
        'html' => FALSE,
        'attributes' => array(),
      ),
    ],
  ];

  return $output;
}

/**
 * Implements hook_preprocess_field().
 */
function dru_claim_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] == 'body' && $vars['element']['#entity_type'] == 'node') {
    $vars['classes_array'][] = 'body-' . $vars['element']['#object']->nid;
  }
  if ($vars['element']['#field_name'] == 'comment_body' && $vars['element']['#entity_type'] == 'comment') {
    $vars['classes_array'][] = 'body-' . $vars['element']['#object']->cid;
  }
}

/**
 * Implements hook_preprocess_comment().
 */
function dru_claim_preprocess_comment(&$vars) {
  if ($vars['comment']->claim <> 0) {
    $vars['classes_array'][] = 'dru-claim comment-claim';
  }
}

/**
 * Implements hook_comment_view().
 */
function dru_claim_comment_view($comment, $view_mode) {
  // Add comment links.
  drupal_add_css(drupal_get_path('module', 'dru_claim') . '/dru_claim.css');
  if (user_access('create claim')) {
    drupal_add_js(drupal_get_path('module', 'dru_tickets') . '/dru_tickets.js');
    drupal_add_library('system', 'drupal.ajax');
    $token = drupal_get_token('dru_claim');

    if ($comment->claim == 0 && $comment->node_type != 'comment_node_ticket') {
      $comment->content['links']['comment']['#links']['dru-claim'] = [
        'title' => t('Claim'),
        'href' => 'ticket/comment/nojs/' . $comment->cid . '/' . $token,
        'query' => drupal_get_destination(),
        'attributes' => [
          'class' => ['use-ajax', 'claim-comment-' . $comment->cid],
        ],
      ];
    }
    elseif ($comment->claim && $comment->node_type != 'comment_node_ticket') {
      $comment->content['links']['comment']['#links']['dru-claim'] = [
        'title' => t('Open ticket'),
        'href' => '/node/' . $comment->claim,
        'attributes' => [
          'class' => ['view-claim'],
        ],
      ];
    }
  }

  // View claim verdict.
  if (user_is_logged_in()) {
    if ($comment->claim <> 0) {
      $ticket = node_load($comment->claim);
      $comment->content += dru_claim_get_ticket_info($ticket, $comment, 'comment');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form().
 */
function dru_claim_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type'])) {
    $type = $form['#node_type']->type;
    $form['workflow']['dru_claim_allow_for_node'] = [
      '#type' => 'checkbox',
      '#title' => t('Allow create claim for this node type'),
      '#default_value' => variable_get('dru_claim_allow_for_node_' . $type),
    ];
  }
}
