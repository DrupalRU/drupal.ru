<?php
/**
 * @file
 * simple_event install file.
 */


/**
 * Implements hook_install().
 */
function simple_events_install() {
  node_types_rebuild();
  $types = node_type_get_types();

  node_add_body_field($types['simple_event'], t('Event description'));

  foreach (_simple_event_installed_fields() as $field) {
    field_create_field($field);
  }
 
  foreach (_simple_event_installed_instances() as $instance) {
    field_create_instance($instance);
  }
}

/**
 * Fields for this module.
 */
function _simple_event_installed_fields() {
  $t = get_t();
  return array(
    'simple_event_type' => array(
      'field_name' => 'simple_event_type',
      'type' => 'taxonomy_term_reference',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'event_types',
            'parent' => 0,
          ),
        ),
      ),
    ),
  );
}

/**
 * Instances for this module.
 */
function _simple_event_installed_instances() {
  $t = get_t();
  return array( 
    'simple_event_type' => array(
      'field_name' => 'simple_event_type',
      'bundle' => 'simple_event',
      'entity_type' => 'node',
      'label' => $t('Event type'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_select',
        'weight' => 3,
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
        ),
      ),

    ),
  );
}


/**
 * Implements hook_schema().
 */
function simple_events_schema() {
  $schema['simple_events'] = array(
    'description' => 'Stores events data.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node} this version belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'time_from' => array(
        'description' => 'Unix timestamp from.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'time_to' => array(
        'description' => 'Unix timestamp to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'latitude' => array(
        'description' => 'Latitude',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'longitude' => array(
        'description' => 'Longitude',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'image_fid' => array(
        'description' => 'The {files} this version belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'url' => array(
        'description' => 'Event url.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'address' => array(
        'description' => 'Event address.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'time_from' => array('time_from'),
      'time_to' => array('time_to'),
    ),
    'foreign keys' => array(
      'versioned_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
  );
  return $schema;
}


/**
 * Implements hook_uninstall().
 */
function simple_events_uninstall() {
 
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'simple_event'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
 
  // Delete all the nodes at once
  node_delete_multiple($nids);
 
  $instance = array('field_name' => 'comment_body', 'bundle' => 'comment_node_simple_event', 'entity_type' => 'comment');
  field_delete_instance($instance);
 
  $instance = array('field_name' => 'body', 'bundle' => 'simple_event', 'entity_type' => 'node');
  field_delete_instance($instance);
 
   $fields = array_keys(_organization_installed_fields());
   foreach ($fields as $field) {
      field_delete_field($field);
  }

  // Purge all field infromation
   field_purge_batch(1000);
}
