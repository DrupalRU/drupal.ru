<?php

/**
 * @file
 */

/**
 * Implements hook_token_info().
 */
function user_filter_notify_token_info() {

  $info = array();

  $info['types']['author'] = array(
    'name' => t('Author'),
    'description' => t('Content author'),
    'needs-data' => 'user',
  );
  $info['types']['text'] = array(
    'name' => t('Text'),
    'description' => t('Original Text'),
  );

  $info['tokens']['author']['uid'] = array(
    'name' => t('Author UID'),
    'description' => t('Author User ID'),
  );
  $info['tokens']['author']['name'] = array(
    'name' => t('Author name'),
    'description' => t('Author name'),
  );
  $info['tokens']['author']['mail'] = array(
    'name' => t('Author mail'),
    'description' => t('Author mail'),
  );
  $info['tokens']['author']['path'] = array(
    'name' => t('Author path'),
    'description' => t('Path to Author profile'),
  );
  $info['tokens']['text']['original'] = array(
    'name' => t('Original text'),
    'description' => t('Original Formatted Text'),
  );
  $info['tokens']['text']['simple'] = array(
    'name' => t('Text without tags'),
    'description' => t('Strip all HTML-tags in text'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function user_filter_notify_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if (isset($data['author'])) {
    $author = $data['author'];
  }
  if (isset($data['text'])) {
    $text = $data['text'];
  }

  $replacements = array();

  if ($type == 'author' && !empty($author)) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'uid':
          $replacements[$original] = $author->uid;
          break;

        case 'name':
          $replacements[$original] = $author->name;
          break;

        case 'mail':
          $replacements[$original] = $author->mail;
          break;

        case 'path':
          $replacements[$original] = drupal_get_path_alias('user/' . $author->uid);
          break;
      }
    }
  }

  if ($type == 'text' && !empty($text)) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'original':
          $replacements[$original] = $text;
          break;

        case 'simple':
          $replacements[$original] = strip_tags($text);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements of hook_form_alter().
 */
function user_filter_notify_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#form_id'] == 'user_admin_settings') {
    $default = variable_get('user_info_notify');
    $form['user_info'] = array();
    $form['user_info']['#type'] = 'fieldset';
    $form['user_info']['#collapsible'] = TRUE;
    $form['user_info']['#collapsed'] = FALSE;
    $form['user_info']['#group'] = 'email';
    $form['user_info']['#title'] = t('Notification by the mention');
    $form['user_info']['#description'] = t('Edit Email message sent to the user at the mention of its publication in the "@username"');
    $form['user_info']['notify'] = array(
      '#type' => 'checkbox',
      '#title' => t('Notify the user when his account was mentioned.'),
      '#default_value' => $default['notify'],
    );
    $form['user_info']['settings'] = array(
      '#type' => 'container',
      '#states' => array(
        'invisible' => array(
          'input[name="notify"]' => array('checked' => FALSE),
        ),
      ),
      'notify_subject' => array(
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#default_value' => $default['subject'],
        '#maxlength' => 180,
      ),
      'notify_body' => array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => $default['message'],
        '#rows' => 15,
      ),
    );
    $form['user_info']['token']['#type'] = 'fieldset';
    $form['user_info']['token']['#collapsible'] = FALSE;
    $form['user_info']['token']['#collapsed'] = FALSE;
    $form['user_info']['token']['tokens'] = array(
      '#theme' => 'token_tree_link',
      '#token_types' => array('node', 'comment', 'user', 'author'),
      '#global_types' => TRUE,
      '#click_insert' => TRUE,
    );
    $form['user_info']['#weight'] = 0;
    $form['#submit'][] = 'user_filter_notify_form_submit';
  }
}

/**
 *
 */
function user_filter_notify_form_validate($form, &$form_state) {

}

/**
 *
 */
function user_filter_notify_form_submit($form, &$form_state) {
  $user_info_notify = array(
    'notify' => $form_state['values']['notify'],
    'subject' => $form_state['values']['notify_subject'],
    'message' => $form_state['values']['notify_body'],
  );
  variable_set('user_info_notify', $user_info_notify);
}

/**
 * Implements of hook_entity_update().
 */
function user_filter_notify_entity_update($entity, $type) {
  user_filter_notify($entity, $type);
}

/**
 * Implements of hook_entity_insert().
 */
function user_filter_notify_entity_insert($entity, $type) {
  user_filter_notify($entity, $type);
}

/**
 * Send mail.
 */
function user_filter_notify($entity, $type) {
  $pattern = variable_get('user_info_notify');
  if ($pattern['notify']) {
    if ($type == 'node' && !empty($entity->body['und'][0]['value'])) {
      $body = $entity->body['und'][0]['value'];
      $node = $entity;
      $comment = NULL;
      $author = user_load($entity->uid);
    }
    if ($type == 'comment' && !empty($entity->comment_body['und'][0]['value'])) {
      $body = $entity->comment_body['und'][0]['value'];
      $node = node_load($entity->nid);
      $comment = $entity;
      $author = user_load($entity->uid);
    }
    if (!empty($body)) {
      $users = user_filter_mention($body);
      foreach ($users as $user) {
        $theme = token_replace($pattern['subject'], array('user' => $user, 'author' => $author, 'node' => $node, 'comment' => $comment, 'text' => $body));
        $message = token_replace($pattern['message'], array('user' => $user, 'author' => $author, 'node' => $node, 'comment' => $comment, 'text' => $body));
        $from = variable_get('site_mail', ini_get('sendmail_from'));
        drupal_mail('user_filter_notify', 'user_filter_notify', $user->mail, language_default(), array(
        'context' => array(
          'subject' => $theme,
          'message' => $message,
        ), $from,
        ));
      }
    }
  }
}

/**
 *
 */
function user_filter_notify_mail($key, &$message, $params) {
  if ($key == 'user_filter_notify') {
    $message['subject'] = $params['context']['subject'];
    $message['body'][] = $params['context']['message'];
  }
}
