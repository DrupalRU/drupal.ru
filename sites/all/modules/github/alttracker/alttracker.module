<?php

/**
 * @file
 * Tracks recent content posted by a user or users.
 */

/**
 * Implements hook_help().
 */
function alttracker_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tracker':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Tracker module displays the most recently added and updated content on your site, and allows you to follow new content created by each user. This module has no configuration options. For more information, see the online handbook entry for <a href="@tracker">Tracker module</a>.', array('@tracker' => 'http://drupal.org/documentation/modules/tracker/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t('The Tracker module adds a new menu item to the Navigation menu, called <em>Recent content</em>. You can configure menu items via the <a href="@menus">Menus administration page</a>.', array('@menus' => url('admin/structure/menu'))) . '</dd>';
      $output .= '<dt>' . t('Tracking new and updated site content') . '</dt>';
      $output .= '<dd>' . t("The <a href='@recent'>Recent content</a> page shows new and updated content in reverse chronological order, listing the content type, title, author's name, number of comments, and time of last update. Content is considered updated when changes occur in the text, or when new comments are added. The <em>My recent content</em> tab limits the list to the currently logged-in user.", array('@recent' => url('tracker'))) . '</dd>';
      $output .= '<dt>' . t('Tracking user-specific content') . '</dt>';
      $output .= '<dd>' . t("To follow a specific user's new and updated content, select the <em>Track</em> tab from the user's profile page.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function alttracker_theme() {
  return array(
    'alttracker' => array(
      'variables' => array( 'nodes' => NULL ),
    ),
    'alttracker_icon' => array(
      'variables' => array( 'node' => NULL ),
    ),
  );
}


/**
 * Implements hook_permission().
 */
function alttracker_permission() {
  return array(
    'administer alttracker' => array(
      'title' => t('Configure Alttracker'),
      'description' => t('Configure alternative tracker.'),
      'restrict access' => TRUE,
      'warning' => t('This permission allow user to change alternative tracker behaviour.')
    ),
  );
}

/**
 * Implements hook_menu().
 */
function alttracker_menu() {
  $items['alttracker'] = array(
    'title' => 'Recent content',
    'page callback' => 'alttracker_page',
    'access arguments' => array('access content'),
    'weight' => 1,
    'file' => 'alttracker.pages.inc',
  );

  $items['alttracker/all'] = array(
    'title' => 'All recent content',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['alttracker/my'] = array(
    'title' => 'My recent content',
    'page callback' => 'alttracker_page_my',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'alttracker.pages.inc',
    'access callback' => 'user_is_logged_in',
  );

  $items['user/%user/alttracker'] = array(
    'title' => 'Track',
    'page callback' => 'alttracker_page',
    'page arguments' => array(1, TRUE),
    'access callback' => '_alttracker_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'alttracker.pages.inc',
  );

  $items['user/%user/alttracker/content'] = array(
    'title' => 'Track content',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Administer menu.
  $items['admin/config/content/alttracker'] = array(
    'title' => 'Alternative tracker Settings',
    'description' => 'Configure alternative tracker behaviour.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alttracker_admin_settings'),
    'access arguments' => array('administer alttracker'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'alttracker.admin.inc',
  );

  $items['alttracker/autocomplete/%'] = array(
    'page callback' => 'alttracker_autocomplete_callback',
    'page arguments' => array(2),
    'access arguments' => array('administer alttracker'),
    'type' => MENU_CALLBACK,
    'file' => 'alttracker.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Updates tracking information for any items still to be tracked. The variable
 * 'alttracker_index_nid' is set to ((the last node ID that was indexed) - 1) and
 * used to select the nodes to be processed. If there are no remaining nodes to
 * process, 'alttracker_index_nid' will be 0.
 */
function alttracker_cron() {
  $max_nid = variable_get('alttracker_index_nid', 0);
  $batch_size = variable_get('alttracker_batch_size', 1000);
  if ($max_nid > 0) {
    $last_nid = FALSE;
    $result = db_query_range('SELECT nid, uid, status FROM {node} WHERE nid <= :max_nid ORDER BY nid DESC', 0, $batch_size, array(':max_nid' => $max_nid), array('target' => 'slave'));

    $count = 0;

    foreach ($result as $row) {
      // Calculate the changed timestamp for this node.
      $changed = _alttracker_calculate_changed($row->nid);

      // Remove existing data for this node.
      db_delete('alttracker_node')
        ->condition('nid', $row->nid)
        ->execute();
      db_delete('alttracker_user')
        ->condition('nid', $row->nid)
        ->execute();

      // Insert the node-level data.
      db_insert('alttracker_node')
        ->fields(array(
          'nid' => $row->nid,
          'published' => $row->status,
          'changed' => $changed,
        ))
        ->execute();

      // Insert the user-level data for the node's author.
      db_insert('alttracker_user')
        ->fields(array(
          'nid' => $row->nid,
          'published' => $row->status,
          'changed' => $changed,
          'uid' => $row->uid,
        ))
        ->execute();

      $query = db_select('comment', 'c', array('target' => 'slave'));
      // Force PostgreSQL to do an implicit cast by adding 0.
      $query->addExpression('0 + :changed', 'changed', array(':changed' => $changed));
      $query->addField('c', 'status', 'published');
      $query
        ->distinct()
        ->fields('c', array('uid', 'nid'))
        ->condition('c.nid', $row->nid)
        ->condition('c.uid', $row->uid, '<>')
        ->condition('c.status', COMMENT_PUBLISHED);

      // Insert the user-level data for the commenters (except if a commenter
      // is the node's author).
      db_insert('alttracker_user')
        ->from($query)
        ->execute();

      // Note that we have indexed at least one node.
      $last_nid = $row->nid;

      $count++;
    }

    if ($last_nid !== FALSE) {
      // Prepare a starting point for the next run.
      variable_set('alttracker_index_nid', $last_nid - 1);

      watchdog('tracker', 'Indexed %count content items for tracking.', array('%count' => $count));
    }
    else {
      // If all nodes have been indexed, set to zero to skip future cron runs.
      variable_set('alttracker_index_nid', 0);
    }
  }
}

/**
 * Access callback for user/%user/track.
 */
function _alttracker_user_access($account) {
  return user_view_access($account) && user_access('access content');
}

/**
 * Implements hook_node_insert().
 *
 * Adds new tracking information for this node since it's new.
 */
function alttracker_node_insert($node) {
  _alttracker_add($node->nid, $node->uid, $node->changed);
}

/**
 * Implements hook_node_update().
 *
 * Adds tracking information for this node since it's been updated.
 */
function alttracker_node_update($node) {
  $node_field = _alttracker_get_compared_fields($node);
  $node_origin_field = _alttracker_get_compared_fields($node->original);

  if ($node_field !== $node_origin_field) {
    _alttracker_add($node->nid, $node->uid, $node->changed);
  }
}

/**
 * Return field data to compare by field-type schema.
 *
 * @param object $node
 *
 * @return array
 */
function _alttracker_get_compared_fields($node) {
  $result = array();
  $schemas = _alttracker_field_types();
  $fields = variable_get("alttracker_node_type_fields_{$node->type}", array());

  foreach ($fields as $field => $schema) {
    if ($schemas[$schema]) {
      foreach ($node->{$field}[LANGUAGE_NONE] as $item) {
        $result[$field][] = array_filter($item, function($key) use ($schemas, $schema) {
          return in_array($key, $schemas[$schema]);
        },ARRAY_FILTER_USE_KEY);
      }
    }
    else {
      $result[$field] = $node->{$field};
    }
  }

  return $result;
}

/**
 * Supported field types.
 *
 * @return array
 */
function _alttracker_field_types() {
  return array(
    'title' => array(),
    'text' => array('value'),
    'text_long' => array('value', 'format'),
    'text_with_summary' => array('value', 'format'),
    'number_integer' => array('value'),
    'number_decimal' => array('value'),
    'number_float' => array('value'),
    'list_integer' => array('value'),
    'list_boolean' => array('value'),
    'list_float' => array('value'),
    'list_text' => array('value'),
    'taxonomy_term_reference' => array('tid'),
    'file' => array('fid'),
    'image' => array('fid'),
  );
}

/**
 * Implements hook_node_delete().
 *
 * Deletes tracking information for a node.
 */
function alttracker_node_delete($node) {
  db_delete('alttracker_node')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('alttracker_user')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_type_delete().
 */
function alttracker_node_type_delete($info) {
  variable_del("alttracker_node_type_fields_{$info->type}");
}

/**
 * Implements hook_comment_update().
 *
 * Comment module doesn't call hook_comment_unpublish() when saving individual
 * comments so we need to check for those here.
 */
function alttracker_comment_update($comment) {
  // comment_save() calls hook_comment_publish() for all published comments
  // so we need to handle all other values here.
  if ($comment->status != COMMENT_PUBLISHED) {
    _alttracker_remove($comment->nid, $comment->uid, $comment->changed);
  }
}

/**
 * Implements hook_comment_publish().
 *
 * This actually handles the insert and update of published nodes since
 * comment_save() calls hook_comment_publish() for all published comments.
 */
function alttracker_comment_publish($comment) {
  _alttracker_add($comment->nid, $comment->uid, $comment->changed);
}

/**
 * Implements hook_comment_unpublish().
 */
function alttracker_comment_unpublish($comment) {
  _alttracker_remove($comment->nid, $comment->uid, $comment->changed);
}

/**
 * Implements hook_comment_delete().
 */
function alttracker_comment_delete($comment) {
  _alttracker_remove($comment->nid, $comment->uid, $comment->changed);
}

/**
 * Updates indexing tables when a node is added, updated, or commented on.
 *
 * @param $nid
 *   A node ID.
 * @param $uid
 *   The node or comment author.
 * @param $changed
 *   The node updated timestamp or comment timestamp.
 */
function _alttracker_add($nid, $uid, $changed) {
  $node = db_query('SELECT nid, status, uid, changed FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchObject();

  // Adding a comment can only increase the changed timestamp, so our
  // calculation here is simple.
  $changed = max($node->changed, $changed);

  // Update the node-level data.
  db_merge('alttracker_node')
    ->key(array('nid' => $nid))
    ->fields(array(
      'changed' => $changed,
      'published' => $node->status,
    ))
    ->execute();

  // Create or update the user-level data, first for the user posting.
  db_merge('alttracker_user')
    ->key(array(
      'nid' => $nid,
      'uid' => $uid,
    ))
    ->fields(array(
      'changed' => $changed,
      'published' => $node->status,
    ))
    ->execute();
  // Update the times for all the other users tracking the post.
  db_update('alttracker_user')
    ->condition('nid', $nid)
    ->fields(array(
      'changed' => $changed,
      'published' => $node->status,
    ))
    ->execute();
}

/**
 * Determines the max timestamp between $node->changed and the last comment.
 *
 * @param $nid
 *   A node ID.
 *
 * @return
 *  The $node->changed timestamp, or most recent comment timestamp, whichever
 *  is the greatest.
 */
function _alttracker_calculate_changed($nid) {
  $changed = db_query('SELECT changed FROM {node} WHERE nid = :nid', array(':nid' => $nid), array('target' => 'slave'))->fetchField();
  $latest_comment = db_query_range('SELECT cid, changed FROM {comment} WHERE nid = :nid AND status = :status ORDER BY changed DESC', 0, 1, array(
    ':nid' => $nid,
    ':status' => COMMENT_PUBLISHED,
  ), array('target' => 'slave'))->fetchObject();
  if ($latest_comment && $latest_comment->changed > $changed) {
    $changed = $latest_comment->changed;
  }
  return $changed;
}

/**
 * Cleans up indexed data when nodes or comments are removed.
 *
 * @param $nid
 *  The node ID.
 * @param $uid
 *   The author of the node or comment.
 * @param $changed
 *   The last changed timestamp of the node.
 */
function _alttracker_remove($nid, $uid = NULL, $changed = NULL) {
  $node = db_query('SELECT nid, status, uid, changed FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchObject();

  // The user only keeps his or her subscription if both of the following are true:
  //   (1) The node exists.
  //   (2) The user is either the node author or has commented on the node.
  $keep_subscription = FALSE;

  if ($node) {
    // Self-authorship is one reason to keep the user's subscription.
    $keep_subscription = ($node->uid == $uid);

    // Comments are a second reason to keep the user's subscription.
    if (!$keep_subscription) {
      // Check if the user has commented at least once on the given nid.
      $keep_subscription = db_query_range('SELECT COUNT(*) FROM {comment} WHERE nid = :nid AND uid = :uid AND status = :status', 0, 1, array(
        ':nid' => $nid,
        ':uid' => $uid,
        ':status' => COMMENT_PUBLISHED,
      ))->fetchField();
    }

    // If we haven't found a reason to keep the user's subscription, delete it.
    if (!$keep_subscription) {
      db_delete('alttracker_user')
        ->condition('nid', $nid)
        ->condition('uid', $uid)
        ->execute();
    }

    // Now we need to update the (possibly) changed timestamps for other users
    // and the node itself.
    // We only need to do this if the removed item has a timestamp that equals
    // or exceeds the listed changed timestamp for the node.
    $alttracker_node = db_query('SELECT nid, changed FROM {alttracker_node} WHERE nid = :nid', array(':nid' => $nid))->fetchObject();
    if ($alttracker_node && $changed >= $alttracker_node->changed) {
      // If we're here, the item being removed is *possibly* the item that
      // established the node's changed timestamp.

      // We just have to recalculate things from scratch.
      $changed = _alttracker_calculate_changed($nid);

      // And then we push the out the new changed timestamp to our denormalized
      // tables.
      db_update('alttracker_node')
        ->fields(array(
          'changed' => $changed,
          'published' => $node->status,
        ))
        ->condition('nid', $nid)
        ->execute();
      db_update('alttracker_node')
        ->fields(array(
          'changed' => $changed,
          'published' => $node->status,
        ))
        ->condition('nid', $nid)
        ->execute();
    }
  }
  else {
    // If the node doesn't exist, remove everything.
    db_delete('alttracker_node')
      ->condition('nid', $nid)
      ->execute();
    db_delete('alttracker_user')
      ->condition('nid', $nid)
      ->execute();
  }
}

function theme_alttracker($variables){
  $rows = array();
  foreach($variables['nodes'] as $node){
    $comments = '<i class="fa fa-comment-o"></i>' . ' ' . $node->comment_count;

    if ($node->new) {
      $comments .= ' ' . '<i class="fa fa-comment"></i>' . ' ' . l(format_plural($node->new, '1 new', '@count new'), 'node/' . $node->nid, array('query' => comment_new_page_count($node->comment_count, $node->new_replies, $node), 'fragment' => 'new'));
    }

    $title = l($node->title, 'node/' . $node->nid, array('query' => comment_new_page_count($node->comment_count, $node->new_replies, $node), 'fragment' => 'new'));
    if(!empty($node->terms)){
      $terms_links = array();
      foreach($node->terms as $term){
        $terms_links[] = array(
          'title' => check_plain($term->name),
          'href' => url("taxonomy/term/" . $term->tid),
          'html' => true,
        );
      }
      $title .= '<div class="terms"><i class="fa fa-tags"></i>  ' . theme('links', array('links' => $terms_links)) . '</div>';
    }

    $rows[] = array(
      'fa-icon' => array('class' => array('icon'), 'data' => theme('alttracker_icon', array('node' => $node))),
      'title' => array('class' => array('title'), 'data' =>  $title ),
      'author' => array('class' => array('author'), 'data' => '<i class="fa fa-user"></i>' . ' ' . theme('username', array('account' => $node))),
      'replies' => array('class' => array('replies'), 'data' => $comments),
      'last updated' => array('class' => array('last-reply'), 'data' => '<i class="fa fa-history"></i>' . ' ' . t('!time ago', array('!time' => format_interval(REQUEST_TIME - $node->changed)))),
    );
  }

  drupal_add_css(drupal_get_path('module', 'alttracker') . '/alttracker.css');

  return theme('table', array('rows' => $rows, 'header' => array('', t('Title'), t('Author'), t('Replies'), t('Last updated')), 'attributes' => array('class' => array('alttracker'))) );
}

function theme_alttracker_icon($variables){
  $node = $variables['node'];
  $icon = '<i class="fa fa-envelope-o"></i>';
  if($node->new){
    $icon = '<i class="fa fa-envelope"></i>';
  }
  if($node->sticky){
    $icon = '<i class="fa fa-flag"></i>';
  }
  if($node->promote){
    $icon = '<i class="fa fa-star"></i>';
  }
  return $icon;
}
