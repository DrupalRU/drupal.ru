<?php

/**
 * @file
 *   Main module file
 */

/**
 * Globals.
 */
define('DRU_TNX_PATH', drupal_get_path('module', 'dru_tnx'));
define('DRU_TNX_ICON', 'heart');
define('DRU_TNX_ICON_COLOR', 'text-danger');

/**
 * Includes.
 */
module_load_include('inc', 'dru_tnx', 'includes/dru_tnx.crud');

/**
 * Implements hook_permission().
 */
function dru_tnx_permission() {
  return [
    'tnx' => [
      'title'       => t('Thank'),
      'description' => t('Allow users thank content'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function dru_tnx_menu() {
  $items['tnx/node/nojs/%node/%'] = [
    'page callback'     => 'dru_tnx_entity',
    'file'              => 'includes/dru_tnx.pages.inc',
    'page arguments'    => [0, 1, 2, 3, 4],
    'access arguments'  => ['tnx'],
    'type'              => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  ];

  $items['tnx/node/ajax/%node/%'] = [
      'delivery callback' => 'ajax_deliver',
      'type'              => MENU_CALLBACK,
    ] + $items['tnx/node/nojs/%node/%'];

  $items['untnx/node/nojs/%node/%'] = [
    'page callback'     => 'dru_tnx_entity',
    'file'              => 'includes/dru_tnx.pages.inc',
    'page arguments'    => [0, 1, 2, 3, 4],
    'access arguments'  => ['tnx'],
    'type'              => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  ];

  $items['untnx/node/ajax/%node/%'] = [
      'delivery callback' => 'ajax_deliver',
      'type'              => MENU_CALLBACK,
    ] + $items['tnx/node/nojs/%node/%'];

  $items['tnx/comment/nojs/%comment/%'] = $items['tnx/node/nojs/%node/%'];

  $items['tnx/comment/ajax/%comment/%'] = [
      'delivery callback' => 'ajax_deliver',
      'type'              => MENU_CALLBACK,
    ] + $items['tnx/comment/nojs/%comment/%'];

  $items['untnx/comment/nojs/%comment/%'] = $items['untnx/node/nojs/%node/%'];

  $items['untnx/comment/ajax/%comment/%'] = [
      'delivery callback' => 'ajax_deliver',
      'type'              => MENU_CALLBACK,
    ] + $items['untnx/comment/nojs/%comment/%'];

  return $items;
}

/**
 * Implements hook_node_view().
 */
function dru_tnx_node_view($node, $view_mode) {
  if (dru_tnx_status_by_node_type($node->type) && isset($node->tnx)) {
    $user = $GLOBALS['user'];

    // Add node links
    if (user_access('tnx') && $node->uid !== $user->uid) {
      drupal_add_library('system', 'drupal.ajax');
      $tnx = dru_tnx_get_user_tnx('node', $node->nid, $user->uid);
      $node->content['links']['comment']['#links']['dru-tnx'] = dru_tnx_link(
        'node', $node->nid, $tnx
      );
    }

    $node->content['tnx'] = dru_tnx_show($node, 'node');
    $node->content['tnx']['#weight'] = count($node->content) + 1;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dru_tnx_preprocess_node(&$vars) {
  if (
    (isset($vars['dru_tnx_set_page_true']) && $vars['dru_tnx_set_page_true']) &&
    (isset($vars['page']) && !$vars['page'])
  ) {
    $vars['page'] = TRUE;
  }
}

/**
 * Implements hook_comment_view().
 */
function dru_tnx_comment_view($comment, $view_mode) {
  $type = mb_substr($comment->node_type, strlen('comment_node_'));
  if (dru_tnx_status_by_comment_node_type($type)) {
    $user = $GLOBALS['user'];
    if (user_access('tnx') && $comment->uid !== $user->uid) {

      drupal_add_library('system', 'drupal.ajax');
      $tnx = dru_tnx_get_user_tnx('comment', $comment->cid, $user->uid);
      $comment->content['links']['comment']['#links']['dru-tnx'] = dru_tnx_link(
        'comment', $comment->cid, $tnx
      );
    }
  }
}

/**
 * View tnx counter.
 *
 * @param object $entity
 * @param string $type
 *
 * @return array
 */
function dru_tnx_show($entity, $type) {

  $id = $type == 'node' ? 'nid' : 'cid';
  $count = (isset($entity->tnx) && $entity->tnx > 0) ? $entity->tnx : 0;

  $counter = [
    '#type'       => 'container',
    '#attributes' => [
      'class' => [
        'tnx-counter',
        'counter-' . $count,
        'dru-tnx-' . $type . '-' . $entity->$id . '-counter',
      ],
    ],
    'counter'     => [
      '#markup' => $count . ' ' . t('Thanks'),
      '#counter' => $count
    ],
  ];

  return $counter;
}

/**
 * Return tnx icon.
 *
 * @return string
 */
function dru_tnx_get_icon() {

  // Require theme icon generator
  $file = DRUPAL_ROOT . '/';
  $file .= drupal_get_path('theme', 'druru');
  $file .= '/theme/icons.inc';

  if (is_file($file)) {
    require_once $file;

    $icon = druru_icon(DRU_TNX_ICON, FALSE, [
      'class' => [
        DRU_TNX_ICON_COLOR,
      ],
    ]);
  }
  else {
    $icon = '<i class="';
    $icon .= DRU_TNX_ICON_COLOR;
    $icon .= ' icon fa fa-';
    $icon .= DRU_TNX_ICON;
    $icon .= '" aria-hidden="true"></i>';
  }

  return $icon;
}

/**
 * Implementation dru_tnx_link().
 *
 * Return array.
 *
 * @param string $entity_type
 * @param string $entity_id
 * @param bool   $tnx
 *
 * @return array
 */
function dru_tnx_link($entity_type, $entity_id, $tnx) {
  $type = $entity_type;
  $token = drupal_get_token('dru_tnx');
  $tnx_link = $tnx ? 'tnx' : 'untnx';

  return [
    'title'      => $tnx ? t('Thank you') : t('Revoke thank you'),
    'href'       => "$tnx_link/" . $type . '/nojs/' . $entity_id . '/' . $token,
    'query'      => drupal_get_destination(),
    'attributes' => [
      'class' => [
        'use-ajax',
        'dru-thanks',
        'dru-' . $tnx_link,
        'dru-tnx-' . $type,
        'dru-tnx-' . $type . '-' . $entity_id,
      ],
    ],
  ];
}

/**
 * Implements hook_user_view().
 */
function dru_tnx_user_view($account, $view_mode, $langcode) {

  $tnx_stats = dru_tnx_get_user_statistic($account->uid);

  // User tnx
  $account->content['summary']['user_tnx'] = [
    '#type'       => 'user_profile_item',
    '#title'      => t('User tnx'),
    '#attributes' => [
      'class' => [
        'dru-tnx-user-stat',
        'user-tnx-stat',
      ],
    ],
    '#weight'     => 1,
    '#markup'     => t(
      'Nodes: @nodes, Comments: @comment',
      [
        '@nodes'   => $tnx_stats->tnx_node,
        '@comment' => $tnx_stats->tnx_comment,
      ]
    ),
    '#thx_node'    => $tnx_stats->tnx_node,
    '#thx_comment' => $tnx_stats->tnx_comment,
  ];

  // Users tnx
  $account->content['summary']['users_tnx'] = [
    '#type'       => 'user_profile_item',
    '#title'      => t('Users tnx'),
    '#attributes' => [
      'class' => [
        'dru-tnx-user-stat',
        'users-tnx-stat',
      ],
    ],
    '#weight'     => 2,
    '#markup'     => t(
      'Nodes: @nodes, Comments: @comment',
      [
        '@nodes'   => $tnx_stats->node,
        '@comment' => $tnx_stats->comment,
      ]
    ),
    '#thx_node'    => $tnx_stats->node,
    '#thx_comment' => $tnx_stats->comment,
  ];
}

/**
 * Implements hook_init().
 */
function dru_tnx_init() {
  drupal_add_css(DRU_TNX_PATH . '/css/dru_tnx.css');
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function dru_tnx_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $form['display']['dru_tnx_node'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable thanks functionality'),
    '#default_value' => dru_tnx_status_by_node_type($form['type']['#default_value']),
    '#description' => t('Show/hide thanks button in node links.'),
  ];

  if (module_exists('comment') && isset($form['comment'])) {
    $form['comment']['dru_tnx_comment'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable thanks functionality for comments'),
      '#default_value' => dru_tnx_status_by_comment_node_type($form['type']['#default_value']),
      '#description' => t('Show/hide thanks button in comment links.'),
    ];
  }

  $form['#submit'][] = 'dru_tnx_form_node_type_form_submit';
}

/**
 * Save node type state for dru_tnx.
 */
function dru_tnx_form_node_type_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $state_node = variable_get('dru_tnx_status_by_node_type');
  $state_node[$values['type']] = $values['dru_tnx_node'];
  variable_set('dru_tnx_status_by_node_type', $state_node);

  if (module_exists('comment')) {
    $state_comment = variable_get('dru_tnx_status_by_comment_node_type');
    $state_comment[$values['type']] = ($values['comment'] == COMMENT_NODE_OPEN) ? $values['dru_tnx_comment'] : false;
    variable_set('dru_tnx_status_by_comment_node_type', $state_comment);
  }
}

/**
 * Check state of ability by node type.
 *
 * @param string $type Machine name of node type.
 *
 * @return bool
 */
function dru_tnx_status_by_node_type(string $type): bool {
  $state = variable_get('dru_tnx_status_by_node_type', []);

  return (isset($state[$type]) && $state[$type]);
}

/**
 * Check state of ability by comment node type.
 *
 * @param string $type Machine name of node type.
 *
 * @return bool
 */
function dru_tnx_status_by_comment_node_type(string $type): bool {
  $state = variable_get('dru_tnx_status_by_comment_node_type', []);

  return (isset($state[$type]) && $state[$type]);
}

/**
 * Implements hook_node_type_delete().
 */
function dru_tnx_node_type_delete($info) {
  $state_node = variable_get('dru_tnx_status_by_node_type');
  $state_comment = variable_get('dru_tnx_status_by_comment_node_type');

  unset($state_node[$info->type]);
  unset($state_comment[$info->type]);

  variable_set('dru_tnx_status_by_node_type', $state_node);
  variable_set('dru_tnx_status_by_comment_node_type', $state_comment);
}
