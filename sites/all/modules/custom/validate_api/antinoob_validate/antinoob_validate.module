<?php

/**
 * @file
 * Main module file.
 */

define('ANTINOOB_VALIDATE_MIN_CAPS_WORD', 1);

/**
 * Implements hook_validator_info().
 * Antinoob validation.
 */
function antinoob_validate_validator_info() {
  $items = [];
  $items[] = [
    'type' => 'text',
    'title' => t('Exclamation'),
    'description' => t('Disallow to use multiple exclamation symbols in a row.'),
    'name' => 'exclamation_point',
    'callback' => 'antinoob_exclamation_symbol_callback',
  ];

  $items[] = [
    'type' => 'text',
    'title' => t('Caps Lock'),
    'description' => t('Disallow to use all capital words.'),
    'name' => 'caps_lock',
    'callback' => 'antinoob_caps_lock_callback',
  ];

  $items[] = [
    'type' => 'text',
    'title' => t('Disallowed words'),
    'description' => t('Disallow to use forbidden words'),
    'name' => 'disallowed_words',
    'callback' => 'antinoob_disallowed_words_callback',
  ];

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function antinoob_validate_form_validate_api_form_settings_alter(&$form) {
  $rules = [
    'forbidden_words' => t('Forbidden words'),
    'caps_words' => t('Forbidden CAPS words'),
  ];

  $form['container']['antinoob_validate'] = [
    '#type' => 'fieldset',
    '#collapsible' => false,
    '#title' => t('Antinoob settings'),
    '#group' => 'group_tabs',
  ];

  foreach ($rules as $rule => $title) {
    $form['container']['antinoob_validate'][$rule] = [
      '#type' => 'textarea',
      '#rows' => 5,
      '#title' => $title,
      '#description' => t('List of forbidden words, coma separated.'),
      '#default_value' => variable_get("antinoob_validate_{$rule}"),
    ];
  }

  $form['#submit'][] = 'antinoob_validate_validate_api_form_submit';
}

/**
 * Save data on submition.
 */
function antinoob_validate_validate_api_form_submit($form, &$form_state) {
  $values = $form_state['values']['container'];
  if (!empty($values['antinoob_validate'])) {
    foreach ($values['antinoob_validate'] as $rule => $data) {
      variable_set("antinoob_validate_{$rule}", trim($data));
    }
  }
}

/**
 * Disallowed validation.
 */
function antinoob_disallowed_words_callback($validate_value) {
  $status = false;
  $matches = [];
  $forbidden_words = [];

  foreach (explode(',', variable_get('antinoob_validate_forbidden_words')) as $word){
    $word = trim($word);
    if (!empty($word)) {
      $forbidden_words[] = $word;
    }
  }

  if ($forbidden_words) {
    $exclude = implode('|', $forbidden_words);
    preg_match_all("/\b{$exclude}\b/ui", $validate_value, $matches);
  }

  if ($matches[0]) {
    $status = t('[@word] is forbidden to use.', ['@word' => implode(', ', $matches[0])]);
  }

  return $status;
}

/**
 * Exclamation validation.
 */
function antinoob_exclamation_symbol_callback($validate_value) {
  $status = false;
  if (preg_match('/!!/', $validate_value)) {
    $status = t('Do not use more than one exclamation point in a row.');
  }

  return $status;
}

/**
 * Caps validation.
 */
function antinoob_caps_lock_callback($validate_value) {
  $status = false;
  $matches = [];
  $forbidden_words = [];

  foreach (explode(',', variable_get('antinoob_validate_caps_words')) as $word){
    $word = trim($word);
    if (!empty($word)) {
      $forbidden_words[] = $word;
    }
  }

  if ($forbidden_words) {
    $exclude = implode('|', $forbidden_words);
    preg_match_all("/\b{$exclude}\b/u", $validate_value, $matches);
  }

  if ($matches[0]) {
    $status = t('Using ALL capital symbols is forbidden: @obscene', ['@obscene' => implode(', ', $matches[0])]);
  }

  return $status;
}
