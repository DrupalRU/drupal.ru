<?php

/**
 * @file Stores hooks for install and update the module.
 */

/**
 * Implements hook_delete().
 */
function drurum_delete() {
  variable_del('drurum_add_organization_help');
}

/**
 * Add link to create content into User Menu.
 */
function drurum_update_7001() {
  $tree = menu_load_links('user-menu');
  $x = $right_weight = -50;
  foreach ($tree as $item) {
    if (!$item['plid']) {
      $item['weight'] = $x++;
      menu_link_save($item, $item);
      // Finding place between link to Messages and Logout.
      if ($item['link_path'] == 'messages') {
        $right_weight = $x++;
      }
    }
  }
  $parent = [
    'link_path' => 'node/add',
    'link_title' => 'Создать',
    'menu_name' => 'user-menu',
    'weight' => $right_weight,
    'expanded' => 1,
    'has_children' => 0,
    'customized' => 1,
    'language' => LANGUAGE_NONE,
    'plid' => 0,
    'module' => 'menu',
  ];
  $plid = menu_link_save($parent);
  $items = [
    [
      'link_path' => 'node/add/blog',
      'link_title' => 'Запись в блог',
      'menu_name' => 'user-menu',
      'weight' => 0,
      'language' => LANGUAGE_NONE,
      'plid' => $plid,
      'module' => 'menu',
    ],
    [
      'link_path' => 'node/add/simple-event',
      'link_title' => 'Событие',
      'menu_name' => 'user-menu',
      'weight' => 1,
      'language' => LANGUAGE_NONE,
      'plid' => $plid,
      'module' => 'menu',
    ],
    [
      'link_path' => 'node/add/organization',
      'link_title' => 'Компания',
      'menu_name' => 'user-menu',
      'weight' => 2,
      'language' => LANGUAGE_NONE,
      'plid' => $plid,
      'module' => 'menu',
    ],
  ];
  foreach ($items as $item) {
    menu_link_save($item);
  }
}

/**
 * Adding info for.
 */
function drurum_update_7002() {
  variable_set('drurum_add_organization_help', '<p class="lead text-success text-center">Вы можете поддержать развитие проекта, в связи с чем информацию о вашей компании увидит большее количество пользователей!</p>
<div class="text-center">
<iframe src="https://money.yandex.ru/quickpay/shop-widget?writer=seller&targets=%D0%9D%D0%B0%20%D1%80%D0%B0%D0%B7%D0%B2%D0%B8%D1%82%D0%B8%D0%B5%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0&targets-hint=&default-sum=2900&button-text=12&payment-type-choice=on&mobile-payment-type-choice=on&comment=on&hint=%D0%9E%D1%81%D1%82%D0%B0%D0%B2%D1%8C%D1%82%D0%B5%20%D1%81%D0%B2%D0%BE%D0%B9%20%D0%BD%D0%B8%D0%BA%D0%BD%D0%B5%D0%B9%D0%BC%2C%20%D1%87%D1%82%D0%BE%D0%B1%D1%8B%20%D0%BC%D1%8B%20%D0%BC%D0%BE%D0%B3%D0%BB%D0%B8%20%D0%BF%D0%BE%D0%B1%D0%BB%D0%B0%D0%B3%D0%BE%D0%B4%D0%B0%D1%80%D0%B8%D1%82%D1%8C&successURL=&quickpay=shop&account=410015352318249" width="450" height="282" frameborder="0" allowtransparency="true" scrolling="no"></iframe>
</div>');

  $type = node_type_load('organization');
  if ($type) {
    $type->help = '<p>Раздел "Компании" - включает в себя список компаний, предоставляющих услуги связанные с CMS Drupal: разработка, поддержка, хостинг, тренинги, проведение мероприятий. А также делают вклад в Drupal сообщество!</p>
<p><em>Материалы проходят проверку перед публикацией</em></p>';
    node_type_save($type);
  }
}

/**
 * Add links into footer.
 */
function drurum_update_7003() {
  db_update('block_custom')
    ->fields([
      'body' => '<div class="logo-footer col-sm-2 col-vsd-1">
  <img src="/profiles/drupalru/themes/druru/img/logos/72.png"></div>
<div class="copyright col-sm-8 col-vsd-7">
<p>Содержимое сайта публикуется на условиях <a href="/license#content">CreativeCommons Attribution-ShareAlike 3.0</a> или более поздней версии<br>
    Программные коды в тексте статей — на условиях <a href="/license#code">GNU GPL v2</a> или более поздней версии.<br><strong>Drupal</strong> - торговая марка <a href="/about/dries_buytaert">Дриса Байтаерта</a>
  </p>
</div>
<div class="age-limit col-sm-2 col-vsd-1">
  <span class="alert-danger">16+</span>
</div>
<div class="site-links col-sm-10 col-sm-offset-2 col-vsd-3 col-vsd-offset-0">
  <ul>
<li><a href="/ru_team" target="blank">Команда сайта</a></li>
<li><a href="/contact" target="blank">Обратная связь</a></li>
<li><a href="/rules" target="blank">Правила сайта</a></li>
</ul>
</div>',
    ])
    ->condition('bid', 95)
    ->execute();
}

/**
 * Add link to Privacy Policy page in footer.
 */
function drurum_update_7004() {

  db_update('block_custom')
    ->fields([
      'body' => '<div class="logo-footer col-sm-2 col-vsd-1">
  <img src="/profiles/drupalru/themes/druru/img/logos/72.png"></div>
<div class="copyright col-sm-8 col-vsd-7">
<p>Содержимое сайта публикуется на условиях <a href="/license#content">CreativeCommons Attribution-ShareAlike 3.0</a> или более поздней версии<br>
    Программные коды в тексте статей — на условиях <a href="/license#code">GNU GPL v2</a> или более поздней версии.<br><strong>Drupal</strong> - торговая марка <a href="/about/dries_buytaert">Дриса Байтаерта</a>
  </p>
</div>
<div class="age-limit col-sm-2 col-vsd-1">
  <span class="alert-danger">16+</span>
</div>
<div class="site-links col-sm-10 col-sm-offset-2 col-vsd-3 col-vsd-offset-0">
  <ul>
<li><a href="/privacy-policy" target="_blank">Конфиденциальность</a></li>
<li><a href="/rules" target="_blank">Правила</a></li>
<li><a href="/ru_team" target="_blank">Команда</a></li>
<li><a href="/contact" target="_blank">Обратная связь</a></li>
</ul>
</div>',
    ])
    ->condition('bid', 95)
    ->execute();
}

/**
 * Enable and configure module fz152.
 */
function drurum_update_7005() {
  module_enable(['fz152'], TRUE);
  variable_set('fz152_enable', 1);
  variable_set('fz152_forms', 'user_register_form|99');
  variable_set('fz152_is_checkbox', 1);
  variable_set('fz152_privacy_policy_page_path', 'privacy-policy');
  variable_set('fz152_privacy_policy_page_title', 'Политика конфиденциальности');
}

/**
 * Add "Other" to claim type.
 */
function drurum_update_7006() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('claim_category');
  $term = new stdClass();
  $term->name = t('Other');
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);
}

/**
 * Allow claim to blog node type.
 */
function drurum_update_7007() {
  variable_set('dru_claim_allow_for_node_blog', 1);
}

/**
 * Enable module Activity Calendar.
 */
function drurum_update_7008() {
  module_enable(['acal']);
  variable_set('acal_intervals', '15,30,45');
  variable_set('acal_color', '#2a75be');
  variable_set('acal_node_coeff', 4);

  foreach (node_type_get_names() as $type => $name) {
    variable_set('acal_node_type_' . $type, FALSE);
  }
  variable_set('acal_node_type_blog', TRUE);
}

/**
 * Calculate user activity for the last year.
 */
function drurum_update_7009(&$sandbox) {
  static $year_ago = REQUEST_TIME - 60 * 60 * 24 * 366;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_uid'] = 0;
    // We'll -1 to disregard the uid 0...
    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT uid) FROM {users}')->fetchField() - 1;
  }

  $users = db_select('users', 'u')
    ->fields('u', ['uid'])
    ->condition('uid', $sandbox['current_uid'], '>')
    ->range(0, 50)
    ->orderBy('uid', 'ASC')
    ->execute();

  foreach ($users as $user) {
    $query = db_select('comment', 'c')->fields('c', ['cid', 'created']);
    $query->leftJoin('node', 'n', 'n.nid = c.nid');
    $comments = $query->fields('n', ['type'])
      ->condition('c.created', $year_ago, '>')
      ->condition('c.uid', $user->uid)
      ->execute()
      ->fetchAll();

    foreach ($comments as $comment) {
      if ($comment->type == 'blog') {
        acal_collate($user->uid, $comment->cid, acal_type_convert('comment'), $comment->created);
      }
    }

    $nodes = db_select('node', 'n')
      ->fields('n', ['nid', 'created', 'type'])
      ->condition('n.created', $year_ago, '>')
      ->condition('n.uid', $user->uid)
      ->execute()
      ->fetchAll();

    foreach ($nodes as $node) {
      if ($node->type == 'blog') {
        acal_collate($user->uid, $node->nid, acal_type_convert('node'), $node->created);
      }
    }

    $sandbox['progress']++;
    $sandbox['current_uid'] = $user->uid;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  return 'All users have collated activity for the last year.';
}

/**
 * Setup Alttracker settings for fields comparing on save node.
 */
function drurum_update_7010(&$sandbox) {
  variable_set('alttracker_node_type_fields_blog', [
    'title' => 'title',
    'body' => 'text_with_summary',
  ]);
}

/**
 * Set up Mailsystem theme as default using theme (Druru).
 */
function drurum_update_7011(&$sandbox) {
  variable_set('mailsystem_theme', 'druru');

}

/**
 * Enable Mailsystem and Mimemail modules.
 */
function drurum_update_7012(&$sandbox) {
  module_enable(['mailsystem', 'mimemail', 'mimemail_action']);
}

/**
 * Change text on front page.
 */
function drurum_update_7013() {
  db_update('block_custom')
    ->fields([
      'body' => '<div class="col-sm-7 col-vsd-8 col-sm-offset-1 text-center"><p class="lead"><span style="font-weight: 300;">Drupal (Дрýпал)</span> - является открытой платформой управления контентом для миллионов веб-сайтов и приложений. Он создан активным и разнообразным сообществом людей по всему миру.<br>Благодаря мощному функционалу Друпала, разрабатывать сложные сайты значительно проще, чем писать их с нуля.</p></div><div class="col-sm-4 col-vsd-3  text-center"><a href="/downloads" class="lead download-drupal-front"><i class="fa fa-drupal fa-4x"></i><br>Скачать Drupal!</a></div>',
    ])
    ->condition('bid', 93)
    ->execute();
}

/**
 * Set up alttracker comparing properties.
 */
function drurum_update_7014(&$sandbox) {
  variable_set('alttracker_node_type_properties_blog', [
    'title' => TRUE,
    'status' => TRUE,
    'comment' => TRUE,
    'promote' => TRUE,
    'sticky' => TRUE,
    'changed' => TRUE,
  ]);
}

/**
 * Hide profile field "Security Question".
 */
function drurum_update_7015() {
  // Hide field on registration.
  db_update('profile_field')
    ->fields(['register' => 0])
    ->condition('fid', 37)
    ->execute();
  // Hide field in profile.
  db_update('profile_field')
    ->fields(['visibility' => 4])
    ->condition('fid', 37)
    ->execute();

  // Enable recaptcha.
  module_enable(['recaptcha']);

  // Disable ascii_art_captcha.
  module_disable(['ascii_art_captcha']);

  // Set recaptcha by default.
  variable_set('captcha_default_challenge', 'recaptcha/reCAPTCHA');
}

/**
 * Hide profile field "Open external links...".
 */
function drurum_update_7016() {
  // Hide field in profile.
  db_update('profile_field')
    ->fields(['visibility' => 4])
    ->condition('fid', 32)
    ->execute();
}

/**
 * Enable views, admin_views and others".
 */
function drurum_update_7017() {
  module_enable(['views', 'entity', 'views_bulk_operations', 'admin_views']);
}

/**
 * Replace Unsubscribe tokens for Comment notifier.
 */
function drurum_update_7018() {
  // Replace comment pattern.
  $comment_notify_default = 'comment_notify_comment_notify_default_mailtext';
  if ($comment_notify = variable_get($comment_notify_default)) {
    $pattern = '/\[comment:unsubscribe-url\]/';
    $replacement = '[comment-subscribed:unsubscribe-url:absolute]';
    variable_set($comment_notify_default, preg_replace($pattern, $replacement, $comment_notify));
  }

  // Replace node (author) pattern.
  $node_notify_default = 'comment_notify_node_notify_default_mailtext';
  if ($node_notify = variable_get($node_notify_default)) {
    $pattern = '/\s<tr>(.*)Отписаться от этой ветки<\/a><\/td><\/tr>\s/';
    $replacement = '';
    variable_set($node_notify_default, preg_replace($pattern, $replacement, $node_notify));
  }
}

/**
 * Add settings for alttracker (hide news from some forums).
 */
function drurum_update_7019() {
  variable_set('alttracker_ignore_terms', ['2066', '2057', '3769']);
  variable_set('alttracker_vocabulary_1', 'Мусор, Курилка, Модераторский');
}

/**
 * Change default Time Zone to MSK.
 */
function drurum_update_7020() {
  variable_set('date_default_timezone', 'Europe/Moscow');
}

/**
 * Remove unused modules.
 */
function drurum_update_7021() {
  $modules = ["acl", "advanced_help", "advuser", "autosave", "blocker", "flag", "google_appliance", "icon", "image_filter", "video_filter", "og", "boost", "rrssb", "vud", "votingapi", "smtp", "bloginfo", "chain_menu_access", "codefilter", "comment_mover", "google_pr", "google_plusone", "gravatar", "inactive_user", "mail_edit", "mollom", "ping", "site_map", "whois", "extlink", "forum_access", "nodeaccess", "cacherouter", "gmap", "location", "imagecache_actions", "imagecache_profiles", "textimage", "rustemmer", "entityreference", "coder", "blogapi", "services", "taxonomy_manager", "term_merge", "pearwiki_filter", "ban_user"];
  module_disable($modules);
  drupal_uninstall_modules($modules);
}

/**
 * Convert some "page" to "blog".
 */
function drurum_update_7022() {
  $nids = ['536', '673', '2227', '2253', '2323', '2248', '852', '134', '5022', '10606', '7741', '26333', '27609', '27605', '18067', '31161', '1', '79787', '19533', '11876', '126461'];
  foreach ($nids as $nid) {
    db_update('node')
      ->fields(['type' => 'blog'])
      ->condition('nid', $nid)
      ->execute();
  }
}

/**
 * Disable users contact forms.
 */
function drurum_update_7023() {
  variable_set('contact_default_status', 0);
  db_delete('role_permission')
    ->condition('rid', 2)
    ->condition('permission', 'access user contact forms')
    ->condition('module', 'contact')
    ->execute();
}

/**
 * Disable module "ban_user".
 */
function drurum_update_7024() {
  if (module_exists('ban_user')) {
    module_disable(['ban_user']);
    drupal_uninstall_modules(['ban_user']);
  }
  module_enable(['dru_moderation']);
  // Disable Standard Drupal notification.
  variable_set('user_mail_status_blocked_notify', 0);
}

/**
 * Enable Thanks functionality for "Blog" node type.
 */
function drurum_update_7025(&$sandbox) {
  $node_types = [];
  foreach (node_type_get_types() as $node_type) {
    $node_types[$node_type->type] = FALSE;
  }
  $node_types['blog'] = TRUE;

  variable_set('dru_tnx_status_by_node_type', $node_types);
  variable_set('dru_tnx_status_by_comment_node_type', $node_types);
}

/**
 * Add role "Coordinator".
 */
function drurum_update_7026() {
  $name = t("Coordinator");
  $existing_role = user_role_load_by_name($name);

  if (empty($existing_role)) {
    $role = new stdClass();
    $role->name = $name;
    user_role_save($role);
  }

  db_insert('role_permission')
    ->fields([
      'rid' => 2,
      'permission' => 'dru_tickets view tickets',
      'module' => 'dru_tickets',
    ])
    ->execute();

  db_insert('role_permission')
    ->fields([
      'rid' => 20,
      'permission' => 'dru_tickets moderate tickets',
      'module' => 'dru_tickets',
    ])
    ->execute();

  db_insert('role_permission')
    ->fields([
      'rid' => 21,
      'permission' => 'dru_tickets change any verdict',
      'module' => 'dru_tickets',
    ])
    ->execute();

  db_insert('role_permission')
    ->fields([
      'rid' => 21,
      'permission' => 'dru_tickets moderate tickets',
      'module' => 'dru_tickets',
    ])
    ->execute();
}

/**
 * Remove vocabulary "Ключевые слова" and all terms.
 */
function drurum_update_7027(&$sandbox) {
  $vid = 2;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = db_query('
      SELECT COUNT(t.tid)
      FROM {taxonomy_term_data} t
      INNER JOIN {taxonomy_term_hierarchy} th ON th.tid = t.tid
      WHERE t.vid = :vid
        AND th.parent = 0', [':vid' => $vid])->fetchField();
  }

  // Only load terms without a parent, child terms will get deleted too.
  $result = db_query('
      SELECT t.tid
      FROM {taxonomy_term_data} t
      INNER JOIN {taxonomy_term_hierarchy} th ON th.tid = t.tid
      WHERE t.vid = :vid
        AND th.parent = 0
      LIMIT 0, 50
      ', [':vid' => $vid])->fetchCol();

  foreach ($result as $tid) {
    taxonomy_term_delete($tid);
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) || !$result ? 1 : $sandbox['progress'] / $sandbox['max'];
  unset($result);

  if ($sandbox['#finished']) {
    field_delete_field('taxonomy_vocabulary_2');
    taxonomy_vocabulary_delete($vid);
    return "Keywords of vocabulary_2 has been deleted";
  }
}

/**
 * Remove profile field «Секретный вопрос».
 */
function drurum_update_7028() {
  $name = 'profile_secret';

  // Get field id by name.
  $field_id = db_select('profile_field', 'pf')
    ->fields('pf', ['fid'])
    ->condition('pf.name', $name)
    ->execute()
    ->fetchField();

  // If field exists.
  if (!empty($field_id)) {
    // Remove field values.
    db_delete('profile_value')
      ->condition('fid', $field_id)
      ->execute();

    // Additional check that values were removed.
    $count = db_select('profile_value', 'pv')
      ->condition('pv.fid', $field_id)
      ->countQuery()
      ->execute()
      ->fetchField();

    // If all data removed then remove field.
    if ($count == 0) {
      db_delete('profile_field')
        ->condition('fid', $field_id)
        ->execute();
    }
  }
}

/**
 * Remove profile field «Открывать внешние ссылки в новом окне».
 */
function drurum_update_7029() {
  $name = 'profile_ext_links_in_new_window';

  // Get field id by name.
  $field_id = db_select('profile_field', 'pf')
    ->fields('pf', ['fid'])
    ->condition('pf.name', $name)
    ->execute()
    ->fetchField();

  // If field exists.
  if (!empty($field_id)) {
    // Remove field values.
    db_delete('profile_value')
      ->condition('fid', $field_id)
      ->execute();

    // Additional check that values were removed.
    $count = db_select('profile_value', 'pv')
      ->condition('pv.fid', $field_id)
      ->countQuery()
      ->execute()
      ->fetchField();

    // If all data removed then remove field.
    if ($count == 0) {
      db_delete('profile_field')
        ->condition('fid', $field_id)
        ->execute();
    }
  }
}

/**
 * Hide some fields from register page.
 */
function drurum_update_7030() {
  db_update('profile_field')
    ->fields(['register' => 0])
    ->condition('register', 1)
    ->execute();
}

/**
 * Configure table filter (for add "table" class to HTML-tables).
 */
function drurum_update_7031(&$sandbox) {
  module_enable(['dru_filters']);

  db_insert('filter')
    ->fields([
      'format' => '1',
      'module' => 'dru_filters',
      'name' => 'dru_filters_table_fix',
      'weight' => '0',
      'status' => '1',
      'settings' => 'a:2:{s:11:"classes_add";s:15:"table dru-table";s:14:"classes_remove";s:0:"";}',
    ])
    ->execute();
}

/**
 * Remove profile field «Откуда узнали о Drupal?».
 */
function drurum_update_7032() {
  $name = 'profile_referer';

  // Get field id by name.
  $field_id = db_select('profile_field', 'pf')
    ->fields('pf', ['fid'])
    ->condition('pf.name', $name)
    ->execute()
    ->fetchField();

  // If field exists.
  if (!empty($field_id)) {
    // Remove field values.
    db_delete('profile_value')
      ->condition('fid', $field_id)
      ->execute();

    // Additional check that values were removed.
    $count = db_select('profile_value', 'pv')
      ->condition('pv.fid', $field_id)
      ->countQuery()
      ->execute()
      ->fetchField();

    // If all data removed then remove field.
    if ($count == 0) {
      db_delete('profile_field')
        ->condition('fid', $field_id)
        ->execute();
    }
  }
}

/**
 * Add role "Dev Team".
 */
function drurum_update_7033() {
  $name = t("Dev Team");
  $existing_role = user_role_load_by_name($name);

  if (empty($existing_role)) {
    $role = new stdClass();
    $role->name = $name;
    user_role_save($role);
  }
}

/**
 * Add permissions to use DarkMatter.
 */
function drurum_update_7034() {
  db_insert('role_permission')
    ->fields([
      'rid' => 22,
      'permission' => 'darkmatter comments',
      'module' => 'darkmatter',
    ])
    ->execute();
}

/**
 * Revert and fix update 7034.
 */
function drurum_update_7035() {
  db_delete('role_permission')
    ->condition('rid', 22)
    ->condition('permission', 'darkmatter comments')
    ->condition('module', 'darkmatter')
    ->execute();

  $coordinator_role = user_role_load_by_name("Coordinator");

  db_insert('role_permission')
    ->fields([
      'rid' => $coordinator_role->rid,
      'permission' => 'darkmatter comments',
      'module' => 'darkmatter',
    ])
    ->execute();
}

/**
 * Disable module "antiswearing_validate".
 */
function drurum_update_7036() {
  if (module_exists('antiswearing_validate')) {
    module_disable(['antiswearing_validate']);
    drupal_uninstall_modules(['antiswearing_validate']);
  }
}

/**
 * Disable module "book".
 */
function drurum_update_7037() {
  if (module_exists('book')) {
    module_disable(['book']);
    drupal_uninstall_modules(['book']);
  }
}

/**
 * Install module "One Click Upload".
 */
function drurum_update_7038() {
  // Enable module
  module_enable(['ocupload']);
  // Add permissions for registered users
  db_insert('role_permission')
    ->fields([
      'rid' => 2,
      'permission' => 'upload files use template 1',
      'module' => 'ocupload',
    ])
    ->execute();
  // Edit image button on BUEditor
  db_update('bueditor_buttons')
    ->fields(['content' => 'js: E.showFileSelectionDialog();'])
    ->condition('bid', 113)
    ->execute();
}

/**
 * Enable module "ymb".
 */
function drurum_update_7039() {
  module_enable(['ymb']);
}

/**
 * Enable module "Colorbox".
 */
function drurum_update_7040() {
  module_enable(['colorbox']);
  db_insert('variable')
    ->fields([
      'name' => 'colorbox_load',
      'value' => 'i:1;',
    ])
    ->execute();
  db_insert('filter')
    ->fields([
      'format' => '1',
      'module' => 'dru_filters',
      'name' => 'dru_filters_colorbox',
      'weight' => '0',
      'status' => '1',
      'settings' => 'a:0:{}',
    ])
    ->execute();
}

/**
 * Remove H1 button from BUEditor.
 */
function drurum_update_7041() {
  db_update('bueditor_buttons')
    ->fields(['content' => "js: E.tagChooser([\n ['h2', 'Заголовок 2'],\n ['h3', 'Заголовок 3'],\n ['h4', 'Заголовок 4'],\n]);"])
    ->condition('bid', 109)
    ->execute();
}

/**
 * Rules during registration.
 */
function drurum_update_7042() {
  variable_set('fz152_checkbox_title', 'Я даю согласие на <a href="/privacy-policy" target="_blank" rel="nofollow">обработку моих персональных данных</a>.</br>Нажимая кнопку "Регистрация", вы соглашаетесь с <a href="/rules" target="_blank" rel="nofollow">правилами</a> сайта.');
}

/**
 * "Events" refactoring.
 */
function drurum_update_7043() {
  if (module_exists('simple_events')) {
    module_disable(['simple_events']);
    drupal_uninstall_modules(['simple_events']);
  }

  module_enable(['date']);
  module_enable(['date_views']);
  module_enable(['link']);
  module_enable(['field_ui']);

  $t = get_t();
  if (!in_array('event', node_type_get_names())) {
    $type = [
      'type' => 'event',
      'name' => $t('Event'),
      'base' => 'node_content',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
      'title_label' => $t('Title')
    ];

    $type = node_type_set_defaults($type);
    node_type_save($type);

    variable_set('comment_event', '1');
    variable_set('node_submitted_event', '0');
    variable_set('node_options_event', ['status']);

    // Create fields and fields' instances
    $files = file_scan_directory(drupal_get_path('module', 'drurum') . '/includes/fields', '/.*\.inc$/');
    foreach ($files as $filepath => $file) {
      require_once $filepath;
    }

    $item = array(
      'link_path' => 'node/add/event',
      'link_title' => t('Event'),
      'menu_name' => 'user-menu',
      'weight' => 1,
      'plid' => 3971,
      'module' => 'menu',
    );
    menu_link_save($item);

    // Create views
    $files = file_scan_directory(drupal_get_path('module', 'drurum') . '/includes/views', '/.*\.inc$/');
    foreach ($files as $filepath => $file) {
      require_once $filepath;
    }
  }

  // Delete manually created link for Events
  menu_link_delete(3389);
}

/**
 * Disable module dru_forum.
 */
function drurum_update_7044() {
  if (module_exists('dru_forum')) {
    module_disable(['dru_forum']);
    drupal_uninstall_modules(['dru_forum']);
  }
}

/**
 * Disable and uninstall module inner_poll.
 */
function drurum_update_7045() {
  if (module_exists('inner_poll')) {
    module_disable(['inner_poll']);
    drupal_uninstall_modules(['inner_poll']);
  }
}

/**
 * Disable and uninstall module user_filter.
 * Replace '@username' with bb-code in nodes and comments.
 */
function drurum_update_7046() {
  $fields = ['body', 'comment_body'];

  foreach ($fields as $field) {
    $result = db_select('field_data_' . $field, 'b')
      ->fields('b', [$field . '_value', 'entity_id'])
      ->execute()
      ->fetchAll();

    foreach ($result as $body) {
      $patterns[] = "/(^|[^@\\w])@(\\w{1,15})\\b/";
      $replacements[] = "$1[user=$2]$2[/user]";

      $new_body = preg_replace($patterns, $replacements, $body->{$field . '_value'});

      db_update('field_data_' . $field)
        ->fields([$field . '_value' => $new_body])
        ->condition('entity_id', $body->entity_id)
        ->execute();
    }
  }

  if (module_exists('user_filter') && module_exists('user_filter_notify')) {
    module_disable(['user_filter_notify', 'user_filter']);
    drupal_uninstall_modules(['user_filter_notify', 'user_filter']);
  }
}

/**
 * Disable and uninstall "darkmatter" module.
 */
function drurum_update_7047() {
  db_update('comment')
    ->fields(['status' => 0])
    ->condition('darkmatter', 1)
    ->execute();

  db_update('node')
    ->fields(['status' => 0])
    ->condition('darkmatter', 1)
    ->execute();

  if (module_exists('darkmatter')) {
    module_disable(['darkmatter']);
    // Необходимо удалять вручную, т.к. удаление
    // здесь приводить к ошибке
    //drupal_uninstall_modules(['darkmatter']);
  }
}
