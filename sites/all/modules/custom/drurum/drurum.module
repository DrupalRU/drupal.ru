<?php

/**
 * @file
 * Variable name which contains flag. If the flag is set to TRUE,
 * then it means that we need to automatically redirect user from
 * 403 page to authorization form. After authorization module
 * login_destination will return back user.
 */

define('DRURUM_LOGIN_WHEN_403', 'drurum_login_when_403');
/**
 * Variable name which contains list of rules for rename actions (menu links).
 */
define('DRURUM_ACTIONS_OVERRIDE', 'drurum_actions_override');

/**
 * Implements hook_module_implements_alter().
 */
function drurum_module_implements_alter(&$implementations, $hook) {
  // Hooks for moving into the end.
  $hooks_to_the_end = ['menu_local_tasks', 'mail_alter'];

  // Move hooks into the end.
  if (in_array($hook, $hooks_to_the_end)) {
    $module = 'drurum';
    $group = $implementations[$module];
    unset($implementations[$module]);
    $implementations[$module] = $group;
  }
}

/**
 * Implements hook_menu().
 */
function drurum_menu() {
  $items['admin/config/system/drupal-ru'] = [
    'title' => 'Drupal.ru customizations',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['drurum_admin_form'],
    'access arguments' => ['administer site configurations'],
    'file' => 'drurum.admin.inc',
    'file path' => drupal_get_path('module', 'drurum') . '/includes',
  ];
  return $items;
}

/**
 * Implements hook_help().
 */
function drurum_help($path, $arg) {
  $help = variable_get('drurum_add_organization_help');
  if ($path == 'node/add/organization' && $help) {
    return $help;
  }
}

/**
 * Implements hook_node_access().
 */
function drurum_node_access($node, $op, $account) {
  $access = NODE_ACCESS_IGNORE;
  if ($op == 'update' && !user_access('drurum bypass expiration', $account)) {
    $time = variable_get('drurum_exp_time_' . $node->type, '1 month');
    if ($node->created * 1 < strtotime("-{$time}")) {
      $access = NODE_ACCESS_DENY;
    }
  }
  return $access;
}

/**
 * Implements hook_permission().
 */
function drurum_permission() {
  return [
    'drurum bypass expiration' => [
      'title' => t('Bypass restriction by expiration time'),
      'description' => t('Allowed to edit nodes by default permissions bypassing restrictions by expiration time.'),
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form().
 */
function drurum_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type'])) {
    $type = $form['#node_type']->type;
    $form['workflow']['drurum_exp_time'] = [
      '#type' => 'textfield',
      '#title' => t('Expiration time'),
      '#description' => t('Expiration time, after which editing will be disallowed. The value will be used through function !strtotime.', [
        '!strtotime' => l('strtotime', 'http://php.net/manual/ru/function.strtotime.php'),
      ]),
      '#default_value' => variable_get('drurum_exp_time_' . $type, '1 month'),
    ];
  }
}

/**
 * Implements hook_menu_alter().
 */
function drurum_preprocess_menu_local_action(&$link) {
  // If we have any rules of overriding actions titles, then handle their.
  if (variable_get(DRURUM_ACTIONS_OVERRIDE)) {
    foreach (variable_get(DRURUM_ACTIONS_OVERRIDE) as $action_path => $action_name) {
      $link = &$link['element']['#link'];
      // Override in case when path started from rule.
      if (!empty($link['href']) && strpos($link['href'], $action_path) === 0) {
        $link['element']['#link']['title'] = $action_name;
      }
    }
  }
}

/**
 * Implements hook_query_alter().
 */
function drurum_query_alter(QueryAlterableInterface $query) {
  $tables = $query->getTables();
  $joins = ['n', 'ncs', 'f', 'u', 'u2'];
  // The query at forum page has many joins and we can detect it easy.
  if (count(array_intersect($joins, array_keys($tables))) == 5) {
    // Forum index page requested sorting here.
    if ($query instanceof TableSort) {
      $query->leftJoin('resolved', 'r', 'r.nid = f.nid');
      $query->addField('r', 'resolved');
    }
  }
}

/**
 * Implements hook_query_privatemsg_unread_count_alter().
 */
function drurum_query_privatemsg_unread_count_alter(&$query) {
  $expressions = &$query->getExpressions();
  $expressions['unread_count']['expression'] = 'COUNT(thread_id)';
}

/**
 * Attempts to log in anonymous users before throwing an access denied message.
 */
function drurum_deliver_html_page($page_callback_result) {
  $is_access_denied = $page_callback_result == MENU_ACCESS_DENIED;
  $redirect_enabled = variable_get(DRURUM_LOGIN_WHEN_403, TRUE);

  if ($is_access_denied && $redirect_enabled && user_is_anonymous()) {
    drupal_set_message(t('Please log in to continue'));
    drupal_goto('user/login', [
      'query' => drupal_get_destination(),
    ]);
  }
  else {
    drupal_deliver_html_page($page_callback_result);
  }
}

/**
 * Implements hook_page_delivery_callback_alter().
 */
function drurum_page_delivery_callback_alter(&$callback) {
  // Swap out the page callback for our own.
  if ($callback == 'drupal_deliver_html_page') {
    $callback = 'drurum_deliver_html_page';
  }
}

/**
 * Implements hook_block_info().
 */
function drurum_block_info() {
  $blocks['new'] = [
    'info' => t('New at the forum'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'properties' => [
      'administrative' => TRUE,
    ],
  ];
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function druru_block_configure($delta = '') {
  return forum_block_configure($delta);
}

/**
 * Implements hook_block_save().
 */
function druru_block_save($delta = '', $edit = []) {
  forum_block_save($delta, $edit);
}

/**
 * Implements hook_block_view().
 */
function drurum_block_view($delta = '') {
  global $user;
  $query = db_select('forum_index', 'f')->fields('f')->addTag('node_access');
  $query->leftJoin('node', 'n', 'f.nid = n.nid');
  $query->fields('n', ['type', 'changed']);
  $title = '';
  switch ($delta) {
    case 'active':
      $title = t('Active forum topics');
      $query->orderBy('f.last_comment_timestamp', 'DESC')
        ->range(0, variable_get('forum_block_num_active', '5'));
      break;

    case 'new':
      $title = t('New forum topics');
      $count = drupal_is_front_page() ? 30 : variable_get('forum_block_num_new', 5);
      $hide_dark_matter = (isset($user->darkmatter) ? $user->darkmatter == 1 : FALSE);
      if (!$hide_dark_matter) {
        $query->condition('n.darkmatter', 0);
      }
      $query->orderBy('f.created', 'DESC')->range(0, $count);
      break;
  }

  // Attach resolved mark.
  if (module_enable(['resolve'])) {
    $query->leftJoin('resolved', 'r', 'r.nid = f.nid');
    $query->fields('r', ['resolved']);
  }

  $block['subject'] = $title;
  // Cache based on the altered query. Enables us to cache with node access enabled.
  $block['content'] = drupal_render_cache_by_query($query, 'forum_block_view');
  $block['content']['#access'] = user_access('access content');

  $result = $query->execute();
  $node_title_list = drurum_node_title_list($result);
  if ($node_title_list) {
    $block['content'] = [];
    $block['content']['forum_list'] = $node_title_list;
    $block['content']['forum_more'] = [
      '#theme' => 'more_link',
      '#url' => 'forum',
      '#title' => t('Read the latest forum topics.'),
    ];
  }
  return $block;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function drurum_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($data['actions']['output'])) {
    foreach ($data['actions']['output'] as $idx => &$action) {
      if (isset($action['#link']['path']) && 'messages/new' == $action['#link']['path']) {
        unset($data['actions']['output'][$idx]);
      }
    }
  }
}

/**
 * Implements hook_privatemsg_autocomplete_alter().
 */
function drurum_privatemsg_autocomplete_alter(&$matches, $names, $fragment) {
  $select = db_select('pm_block_user', 'pmb')
    ->fields('pmb', ['author'])
    ->condition('pmb.recipient', $GLOBALS['user']->uid);

  // Only show existing users, therefore join users.
  $select->innerJoin('users', 'u', 'u.uid = pmb.author');
}

/**
 * Duplicate of node_title_list() with little changes.
 *
 * @param $result
 * @param null $title
 *
 * @return array|bool
 *
 * @see node_title_list()
 */
function drurum_node_title_list($result, $title = NULL) {
  $items = [];

  foreach ($result as $node) {
    $options = ['html' => TRUE];

    // Add comment count to title.
    if (!empty($node->comment_count)) {
      $node_title = format_plural($node->comment_count, '1 comment', '@count comments');
      $option['attributes']['title'] = $node_title;
    }
    $icon = drurum_node_icon($node);
    $mark = theme('mark', [
      'type' => node_mark($node->nid, $node->changed),
    ]);

    $items[] = l($icon . check_plain($node->title) . $mark, 'node/' . $node->nid, $options);
  }

  return $items ? [
    '#theme' => 'item_list__node',
    '#items' => $items,
    '#title' => $title,
  ] : FALSE;
}

/**
 *
 */
function drurum_node_icon($node) {
  $node_types = &drupal_static(__FUNCTION__, []);
  if (!isset($node_types[$node->nid])) {
    $node_types[$node->nid] = NULL;
    $icon = &$node_types[$node->nid];
    // @todo: make UI for adding rules.
    if (function_exists('druru_icon')) {
      switch (TRUE) {
        // Will be used icon "calendar" for events.
        case !empty($node->type) && $node->type == 'event':
          $icon = 'calendar';
          break;

        // Will be used icon "calendar" for events.
        case !empty($node->type) && $node->type == 'organization':
          $icon = 'building-o';
          break;

        // The question can be resolved. Check it.
        case drurum_can_be_resolved($node) && drurum_need_to_resolve($node->nid):
          $icon = empty($node->resolved) ? 'question-circle-o' : 'check-circle-o';
          break;

        default:
          $icon = 'file-text-o';
          break;
      }
      $icon = druru_icon($icon);
    }
    unset($icon);
  }

  return $node_types[$node->nid];
}

/**
 *
 */
function drurum_need_to_resolve($nid) {
  $resolved = &drupal_static(__FUNCTION__, []);
  if (!isset($resolved[$nid])) {
    $resolved[$nid] = db_select('taxonomy_index', 'ti')
      ->condition('ti.nid', $nid)
        // @todo: to add UI for configure the term id.
      ->condition('ti.tid', 15362)
      ->countQuery()
      ->execute()
      ->fetchField() > 0;
  }
  return $resolved[$nid];
}

/**
 *
 */
function drurum_simple_events_list() {
  $default_message = '';

  if (_node_add_access()) {
    $default_message .= '<div>';
    $default_message .= l(t('Add event'), 'node/add/simple-event', [
      'attributes' => [
        'class' => ['btn', 'btn-success'],
      ],
    ]);
    $default_message .= '</div>';
  }

  $nids = _drurum_simple_events_list_nodes();
  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
    $build = node_view_multiple($nodes);
    $build['pager'] = [
      '#theme' => 'pager',
      '#weight' => 5,
    ];
  }
  else {
    $default_message .= '<p>' . t('No upcoming events yet.') . '</p>';
    $build['default_message'] = [
      '#markup' => $default_message,
      '#prefix' => '<div id="first-time">',
      '#suffix' => '</div>',
    ];
  }
  return $build;
}

/**
 *
 */
function _drurum_simple_events_list_nodes() {
  $query = db_select('node', 'n');
  $query->addTag('node_access');
  $query->join('simple_events', 'e', 'e.vid = n.vid');
  $query->condition('n.type', 'simple_event', '=')
    ->condition('n.status', 1)
    ->fields('n', ['nid', 'created'])
    ->orderBy('e.time_from', 'ASC')
    ->extend('PagerDefault')
    ->limit(variable_get('default_nodes_main', 10));
  return $query->execute()->fetchCol();
}

/**
 * @param $node
 *
 * @return bool
 */
function drurum_can_be_resolved($node) {
  $func = 'resolved_node_can_be_resolved';
  return function_exists($func) && $func($node);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drurum_form_menu_edit_item_alter(&$form, &$form_state) {
  array_unshift($form['#submit'], 'drurum_form_menu_edit_item_submit');
  $build = $form_state['build_info'];
  $html_allowed = FALSE;
  if (isset($build['args'][1]['options']['html_allowed'])) {
    $html_allowed = $build['args'][1]['options']['html_allowed'];
  }
  $form['html_allowed'] = [
    '#type' => 'checkbox',
    '#title' => 'Html in title',
    '#default_value' => $html_allowed,
  ];
}

/**
 *
 */
function drurum_form_menu_edit_item_submit($form, &$form_state) {
  $vals = &$form_state['values'];
  if (isset($vals['html_allowed'])) {
    $vals['options']['html_allowed'] = $vals['html_allowed'];
  }
}

/**
 * Implements hook_FORM_ID_form_alter().
 */
function drurum_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    $form['forms_help'] = array(
      '#type'        => 'fieldset',
      '#title'       => t('Forms Help'),
      '#collapsible' => TRUE,
    );
    $form['forms_help']['forms_help'] = array(
      '#type'          => 'checkbox',
      '#title'         => t('Show help for all forms'),
      '#description'   => t('This checkbox allow you to see help for all forms.'),
      '#default_value' => !empty($account->data['forms_help']) ? $account->data['forms_help'] : FALSE,
    );
  }
}

/**
 * Implements hook_user_presave().
 */
function drurum_user_presave(&$edit, $account, $category) {
  if (isset($edit['forms_help'])) {
    // Set new value.
    $edit['data']['forms_help'] = $edit['forms_help'];
  }
  elseif (!isset($account->data['forms_help'])) {
    // Use default if none has been set.
    $edit['data']['forms_help'] = variable_get('forms_help_default_status', 1);
  }
}

/**
 * Implements hook_mail_alter().
 */
function drurum_mail_alter(&$message) {
  $message['from'] = $message['from'] ?? variable_get('site_mail');

  if (!empty($message['to']) && filter_var($message['to'], FILTER_VALIDATE_EMAIL)) {
    $message['send'] = $message['send'] ?? FALSE;
  }
  else {
    $message['send'] = FALSE;
    $type = 'drurum-mail';
    $warning = "Couldn't sent message with ID \"%message_id\", from module \"%module\". Parameter \"TO\" was unavailable.";
    $variables = [
      '%message_id' => $message['id'],
      '%module' => $message['module'],
    ];
    watchdog($type, $warning, $variables, WATCHDOG_WARNING);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drurum_form_comment_node_blog_form_alter(&$form, &$form_state, $form_id) {
  hide($form['field_comment_upload']);
}

/**
 * Implements hook_views_api().
 */
function drurum_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'drurum'),
  );
}

/**
 * Implements hook_views_default_views().
 */
function drurum_views_default_views() {
  $view = new view();
  $view->name = 'events';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'Events Block';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Events Block';
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'some';
  $handler->display->display_options['pager']['options']['items_per_page'] = '3';
  $handler->display->display_options['pager']['options']['offset'] = '0';
  $handler->display->display_options['style_plugin'] = 'default';
  $handler->display->display_options['row_plugin'] = 'fields';
  /* Поведение при отсутствии результатов: Глобальный: Нефильтруемый текст */
  $handler->display->display_options['empty']['area_text_custom']['id'] = 'area_text_custom';
  $handler->display->display_options['empty']['area_text_custom']['table'] = 'views';
  $handler->display->display_options['empty']['area_text_custom']['field'] = 'area_text_custom';
  $handler->display->display_options['empty']['area_text_custom']['empty'] = TRUE;
  $handler->display->display_options['empty']['area_text_custom']['content'] = t('There are no events in the near future');
  /* Поле: Содержимое: Event Image */
  $handler->display->display_options['fields']['field_event_image']['id'] = 'field_event_image';
  $handler->display->display_options['fields']['field_event_image']['table'] = 'field_data_field_event_image';
  $handler->display->display_options['fields']['field_event_image']['field'] = 'field_event_image';
  $handler->display->display_options['fields']['field_event_image']['label'] = '';
  $handler->display->display_options['fields']['field_event_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_event_image']['click_sort_column'] = 'fid';
  $handler->display->display_options['fields']['field_event_image']['settings'] = array(
    'image_style' => '',
    'image_link' => 'content',
  );
  /* Поле: Содержимое: Заголовок */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  /* Поле: Содержимое: Дата начала */
  $handler->display->display_options['fields']['field_event_start_date']['id'] = 'field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['field'] = 'field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['label'] = '';
  $handler->display->display_options['fields']['field_event_start_date']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_event_start_date']['settings'] = array(
    'format_type' => 'short',
    'custom_date_format' => '',
    'fromto' => 'value',
    'multiple_number' => '',
    'multiple_from' => '',
    'multiple_to' => '',
    'show_remaining_days' => 0,
  );
  /* Поле: Содержимое: Текст страницы */
  $handler->display->display_options['fields']['body']['id'] = 'body';
  $handler->display->display_options['fields']['body']['table'] = 'field_data_body';
  $handler->display->display_options['fields']['body']['field'] = 'body';
  $handler->display->display_options['fields']['body']['label'] = '';
  $handler->display->display_options['fields']['body']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['body']['type'] = 'text_trimmed';
  $handler->display->display_options['fields']['body']['settings'] = array(
    'trim_length' => '150',
  );
  /* Критерий сортировки: Содержимое: Дата начала -  дата начала (field_event_start_date) */
  $handler->display->display_options['sorts']['field_event_start_date_value']['id'] = 'field_event_start_date_value';
  $handler->display->display_options['sorts']['field_event_start_date_value']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['sorts']['field_event_start_date_value']['field'] = 'field_event_start_date_value';
  /* Критерий фильтра: Содержимое: Опубликовано */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Критерий фильтра: Содержимое: Тип */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'event' => 'event',
  );
  /* Критерий фильтра: Содержимое: Дата начала -  дата начала (field_event_start_date) */
  $handler->display->display_options['filters']['field_event_start_date_value']['id'] = 'field_event_start_date_value';
  $handler->display->display_options['filters']['field_event_start_date_value']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['filters']['field_event_start_date_value']['field'] = 'field_event_start_date_value';
  $handler->display->display_options['filters']['field_event_start_date_value']['operator'] = '>=';
  $handler->display->display_options['filters']['field_event_start_date_value']['default_date'] = 'now';

  /* Display: Block */
  $handler = $view->new_display('block', 'Block', 'block');
  $handler->display->display_options['block_description'] = 'Events (frontpage)';

  $views[$view->name] = $view;

  /*******************************************************************/

  $view = new view();
  $view->name = 'events_actual';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'Events Actual';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = t('Events');
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'some';
  $handler->display->display_options['pager']['options']['items_per_page'] = '100';
  $handler->display->display_options['pager']['options']['offset'] = '0';
  $handler->display->display_options['style_plugin'] = 'default';
  $handler->display->display_options['row_plugin'] = 'fields';
  /* Заголовок: Глобальный: Нефильтруемый текст */
  $handler->display->display_options['header']['area_text_custom']['id'] = 'area_text_custom';
  $handler->display->display_options['header']['area_text_custom']['table'] = 'views';
  $handler->display->display_options['header']['area_text_custom']['field'] = 'area_text_custom';
  $handler->display->display_options['header']['area_text_custom']['content'] = '<ul class="tabs--primary nav nav-pills"><li class="active"><a href="/events" class="active">Ближайшие мероприятия<span class="element-invisible">(активная вкладка)</span></a></li>
<li class=""><a href="/events/past">Прошедшие мероприятия</a></li>
</ul>';
  /* Поведение при отсутствии результатов: Глобальный: Нефильтруемый текст */
  $handler->display->display_options['empty']['area_text_custom']['id'] = 'area_text_custom';
  $handler->display->display_options['empty']['area_text_custom']['table'] = 'views';
  $handler->display->display_options['empty']['area_text_custom']['field'] = 'area_text_custom';
  $handler->display->display_options['empty']['area_text_custom']['empty'] = TRUE;
  $handler->display->display_options['empty']['area_text_custom']['content'] = t('There are no events in the near future');
  /* Поле: Содержимое: Event Image */
  $handler->display->display_options['fields']['field_event_image']['id'] = 'field_event_image';
  $handler->display->display_options['fields']['field_event_image']['table'] = 'field_data_field_event_image';
  $handler->display->display_options['fields']['field_event_image']['field'] = 'field_event_image';
  $handler->display->display_options['fields']['field_event_image']['label'] = '';
  $handler->display->display_options['fields']['field_event_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_event_image']['click_sort_column'] = 'fid';
  $handler->display->display_options['fields']['field_event_image']['settings'] = array(
    'image_style' => '',
    'image_link' => 'content',
  );
  /* Поле: Содержимое: Заголовок */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  /* Поле: Содержимое: Дата начала */
  $handler->display->display_options['fields']['field_event_start_date']['id'] = 'field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['field'] = 'field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['label'] = '';
  $handler->display->display_options['fields']['field_event_start_date']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_event_start_date']['settings'] = array(
    'format_type' => 'short',
    'custom_date_format' => '',
    'fromto' => 'value',
    'multiple_number' => '',
    'multiple_from' => '',
    'multiple_to' => '',
    'show_remaining_days' => 0,
  );
  /* Поле: Содержимое: Текст страницы */
  $handler->display->display_options['fields']['body']['id'] = 'body';
  $handler->display->display_options['fields']['body']['table'] = 'field_data_body';
  $handler->display->display_options['fields']['body']['field'] = 'body';
  $handler->display->display_options['fields']['body']['label'] = '';
  $handler->display->display_options['fields']['body']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['body']['type'] = 'text_trimmed';
  $handler->display->display_options['fields']['body']['settings'] = array(
    'trim_length' => '150',
  );
  /* Поле: Содержимое: Event Address */
  $handler->display->display_options['fields']['field_event_address']['id'] = 'field_event_address';
  $handler->display->display_options['fields']['field_event_address']['table'] = 'field_data_field_event_address';
  $handler->display->display_options['fields']['field_event_address']['field'] = 'field_event_address';
  $handler->display->display_options['fields']['field_event_address']['label'] = '';
  $handler->display->display_options['fields']['field_event_address']['element_label_colon'] = FALSE;
  /* Поле: Содержимое: Event Type */
  $handler->display->display_options['fields']['field_event_type']['id'] = 'field_event_type';
  $handler->display->display_options['fields']['field_event_type']['table'] = 'field_data_field_event_type';
  $handler->display->display_options['fields']['field_event_type']['field'] = 'field_event_type';
  $handler->display->display_options['fields']['field_event_type']['label'] = '';
  $handler->display->display_options['fields']['field_event_type']['element_label_colon'] = FALSE;
  /* Поле: Содержимое: Event Web-Page */
  $handler->display->display_options['fields']['field_event_link']['id'] = 'field_event_link';
  $handler->display->display_options['fields']['field_event_link']['table'] = 'field_data_field_event_link';
  $handler->display->display_options['fields']['field_event_link']['field'] = 'field_event_link';
  $handler->display->display_options['fields']['field_event_link']['label'] = '';
  $handler->display->display_options['fields']['field_event_link']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_event_link']['click_sort_column'] = 'url';
  $handler->display->display_options['fields']['field_event_link']['type'] = 'link_url';
  /* Критерий сортировки: Содержимое: Дата начала -  дата начала (field_event_start_date) */
  $handler->display->display_options['sorts']['field_event_start_date_value']['id'] = 'field_event_start_date_value';
  $handler->display->display_options['sorts']['field_event_start_date_value']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['sorts']['field_event_start_date_value']['field'] = 'field_event_start_date_value';
  /* Критерий фильтра: Содержимое: Опубликовано */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Критерий фильтра: Содержимое: Тип */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'event' => 'event',
  );
  /* Критерий фильтра: Содержимое: Дата начала -  дата начала (field_event_start_date) */
  $handler->display->display_options['filters']['field_event_start_date_value']['id'] = 'field_event_start_date_value';
  $handler->display->display_options['filters']['field_event_start_date_value']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['filters']['field_event_start_date_value']['field'] = 'field_event_start_date_value';
  $handler->display->display_options['filters']['field_event_start_date_value']['operator'] = '>=';
  $handler->display->display_options['filters']['field_event_start_date_value']['default_date'] = 'now';

  /* Display: Страница */
  $handler = $view->new_display('page', 'Страница', 'page_1');
  $handler->display->display_options['path'] = 'events';

  $views[$view->name] = $view;

  /*******************************************************************/

  $view = new view();
  $view->name = 'events_past';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'Events Past';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = t('Past Events');
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'some';
  $handler->display->display_options['pager']['options']['items_per_page'] = '100';
  $handler->display->display_options['pager']['options']['offset'] = '0';
  $handler->display->display_options['style_plugin'] = 'default';
  $handler->display->display_options['row_plugin'] = 'fields';
  /* Заголовок: Глобальный: Нефильтруемый текст */
  $handler->display->display_options['header']['area_text_custom']['id'] = 'area_text_custom';
  $handler->display->display_options['header']['area_text_custom']['table'] = 'views';
  $handler->display->display_options['header']['area_text_custom']['field'] = 'area_text_custom';
  $handler->display->display_options['header']['area_text_custom']['content'] = '<ul class="tabs--primary nav nav-pills"><li class=""><a href="/events">Ближайшие мероприятия</a></li>
<li class="active"><a href="/events/past" class="active">Прошедшие мероприятия</a><span class="element-invisible">(активная вкладка)</span></li>
</ul>';
  /* Поведение при отсутствии результатов: Глобальный: Нефильтруемый текст */
  $handler->display->display_options['empty']['area_text_custom']['id'] = 'area_text_custom';
  $handler->display->display_options['empty']['area_text_custom']['table'] = 'views';
  $handler->display->display_options['empty']['area_text_custom']['field'] = 'area_text_custom';
  $handler->display->display_options['empty']['area_text_custom']['empty'] = TRUE;
  $handler->display->display_options['empty']['area_text_custom']['content'] = t('There are no events in the near future');
  /* Поле: Содержимое: Event Image */
  $handler->display->display_options['fields']['field_event_image']['id'] = 'field_event_image';
  $handler->display->display_options['fields']['field_event_image']['table'] = 'field_data_field_event_image';
  $handler->display->display_options['fields']['field_event_image']['field'] = 'field_event_image';
  $handler->display->display_options['fields']['field_event_image']['label'] = '';
  $handler->display->display_options['fields']['field_event_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_event_image']['click_sort_column'] = 'fid';
  $handler->display->display_options['fields']['field_event_image']['settings'] = array(
    'image_style' => '',
    'image_link' => 'content',
  );
  /* Поле: Содержимое: Заголовок */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  /* Поле: Содержимое: Дата начала */
  $handler->display->display_options['fields']['field_event_start_date']['id'] = 'field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['field'] = 'field_event_start_date';
  $handler->display->display_options['fields']['field_event_start_date']['label'] = '';
  $handler->display->display_options['fields']['field_event_start_date']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_event_start_date']['settings'] = array(
    'format_type' => 'short',
    'custom_date_format' => '',
    'fromto' => 'value',
    'multiple_number' => '',
    'multiple_from' => '',
    'multiple_to' => '',
    'show_remaining_days' => 0,
  );
  /* Поле: Содержимое: Текст страницы */
  $handler->display->display_options['fields']['body']['id'] = 'body';
  $handler->display->display_options['fields']['body']['table'] = 'field_data_body';
  $handler->display->display_options['fields']['body']['field'] = 'body';
  $handler->display->display_options['fields']['body']['label'] = '';
  $handler->display->display_options['fields']['body']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['body']['type'] = 'text_trimmed';
  $handler->display->display_options['fields']['body']['settings'] = array(
    'trim_length' => '150',
  );
  /* Поле: Содержимое: Event Address */
  $handler->display->display_options['fields']['field_event_address']['id'] = 'field_event_address';
  $handler->display->display_options['fields']['field_event_address']['table'] = 'field_data_field_event_address';
  $handler->display->display_options['fields']['field_event_address']['field'] = 'field_event_address';
  $handler->display->display_options['fields']['field_event_address']['label'] = '';
  $handler->display->display_options['fields']['field_event_address']['element_label_colon'] = FALSE;
  /* Поле: Содержимое: Event Type */
  $handler->display->display_options['fields']['field_event_type']['id'] = 'field_event_type';
  $handler->display->display_options['fields']['field_event_type']['table'] = 'field_data_field_event_type';
  $handler->display->display_options['fields']['field_event_type']['field'] = 'field_event_type';
  $handler->display->display_options['fields']['field_event_type']['label'] = '';
  $handler->display->display_options['fields']['field_event_type']['element_label_colon'] = FALSE;
  /* Поле: Содержимое: Event Web-Page */
  $handler->display->display_options['fields']['field_event_link']['id'] = 'field_event_link';
  $handler->display->display_options['fields']['field_event_link']['table'] = 'field_data_field_event_link';
  $handler->display->display_options['fields']['field_event_link']['field'] = 'field_event_link';
  $handler->display->display_options['fields']['field_event_link']['label'] = '';
  $handler->display->display_options['fields']['field_event_link']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_event_link']['click_sort_column'] = 'url';
  $handler->display->display_options['fields']['field_event_link']['type'] = 'link_url';
  /* Критерий сортировки: Содержимое: Дата начала -  дата начала (field_event_start_date) */
  $handler->display->display_options['sorts']['field_event_start_date_value']['id'] = 'field_event_start_date_value';
  $handler->display->display_options['sorts']['field_event_start_date_value']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['sorts']['field_event_start_date_value']['field'] = 'field_event_start_date_value';
  $handler->display->display_options['sorts']['field_event_start_date_value']['order'] = 'DESC';
  /* Критерий фильтра: Содержимое: Опубликовано */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Критерий фильтра: Содержимое: Тип */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'event' => 'event',
  );
  /* Критерий фильтра: Содержимое: Дата начала -  дата начала (field_event_start_date) */
  $handler->display->display_options['filters']['field_event_start_date_value']['id'] = 'field_event_start_date_value';
  $handler->display->display_options['filters']['field_event_start_date_value']['table'] = 'field_data_field_event_start_date';
  $handler->display->display_options['filters']['field_event_start_date_value']['field'] = 'field_event_start_date_value';
  $handler->display->display_options['filters']['field_event_start_date_value']['operator'] = '<';
  $handler->display->display_options['filters']['field_event_start_date_value']['default_date'] = 'now';

  /* Display: Страница */
  $handler = $view->new_display('page', 'Страница', 'page_1');
  $handler->display->display_options['path'] = 'events/past';

  $views[$view->name] = $view;

  return $views;
}
