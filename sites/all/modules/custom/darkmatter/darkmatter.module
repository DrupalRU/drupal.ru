<?php

/**
 * @file
 * Dark matter module.
 */

/**
 * Implements hook_permission().
 */
function darkmatter_permission() {
  return array(
    'darkmatter comments' => array(
      'title' => t('Mark comments as darkmatter'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function darkmatter_menu() {
  $items['darkmatter/comment/nojs/%comment/%'] = array(
    'page callback' => 'darkmatter_comment',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'darkmatter_move_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  $items['darkmatter/comment/ajax/%comment/%'] = array(
    'page callback' => 'darkmatter_comment',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'darkmatter_move_access',
    'access arguments' => array(3),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_comment_insert().
 */
function darkmatter_comment_insert($comment) {
  if ($comment->pid > 0) {
    $parent_comment = comment_load($comment->pid);
    if ($parent_comment->darkmatter) {
      db_update('comment')
        ->fields(array(
          'darkmatter' => 1,
        ))
        ->condition('cid', $comment->cid)
        ->execute();
      return;
    }
  }
  $node = node_load($comment->nid);
  if ($node->darkmatter) {
    db_update('comment')
      ->fields(array(
        'darkmatter' => 1,
      ))
      ->condition('cid', $comment->cid)
      ->execute();
    return;
  }
}

/**
 * Mark or remove mark 'darkmatter' from comment.
 */
function darkmatter_comment($ajax, $comment, $token) {
  global $user;
  if (!drupal_valid_token($token, 'darkmatter')) {
    return;
  }

  // If current state is darkmatter then we a unmark it.
  $darkmatter_status = $comment->darkmatter ? 0 : 1;

  db_update('comment')
  // Table name no longer needs {}.
    ->fields(array(
      'darkmatter' => $darkmatter_status,
    ))
    ->condition('cid', $comment->cid)
    ->execute();

  $cids[] = $comment->cid;

  $is_ajax = $ajax === 'ajax';

  if ($is_ajax) {
    $commands = array();

    foreach ($cids as $cid) {
      if ($darkmatter_status) {
        $commands[] = ajax_command_invoke('.darkmatter-comment-' . $cid, 'addClass', array('darkmatter'));
        $title = t('not darkmatter');
      }
      else {
        $commands[] = ajax_command_invoke('.darkmatter-comment-' . $cid, 'removeClass', array('darkmatter'));
        $title = t('darkmatter');
      }

      if (!user_access('darkmatter comments') and !$user->darkmatter) {
        $title = t('Comment marked as darkmatter.');
        $replace_comment = '<div class="comment comment-removed bg-danger darkmatter-comment-link-' . $cid . '"> <p>' . $title . '</p></div>';
        $commands[] = ajax_command_replace('.darkmatter-comment-' . $cid, $replace_comment);

      }
      else {
        $link = l($title, 'darkmatter/comment/nojs/' . $cid . '/' . darkmatter_token_to_arg(), array(
          'attributes' => array(
            'class' => array(
              'use-ajax',
              'darkmatter-comment-link-' . $cid,
            ),
          ),
        ));
        $commands[] = ajax_command_replace('.darkmatter-comment-link-' . $cid, $link);
      }
    }

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    if ($darkmatter_status) {
      drupal_set_message(t('Marked as dark matter'));
    }
    else {
      drupal_set_message(t('It is not a dark matter anymore'));
    }
    drupal_goto();
  }
}

/**
 * Implements hook_node_view().
 */
function darkmatter_node_view($node, $view_mode) {
  global $user;
  drupal_add_library('system', 'drupal.ajax');

  if (!empty($user->darkmatter)) {
    $result = db_select('comment', 'c')
      ->fields('c')
      ->condition('darkmatter', 1)
      ->condition('nid', $node->nid)
      ->execute();
    $darkmatter_count = $result->rowCount();
    if ($darkmatter_count > 0 && isset($node->content['links']['comment']['#links']['comment-comments']['title'])) {
      $node->content['links']['comment']['#links']['comment-comments']['title'] = $darkmatter_count . '/' . $node->content['links']['comment']['#links']['comment-comments']['title'];
    }
  }
}

/**
 * Implements hook_comment_view().
 */
function darkmatter_comment_view($comment, $view_mode, $langcode) {
  drupal_add_library('system', 'drupal.ajax');

  if (darkmatter_move_access($comment)) {
    if (darkmatter_node_status($comment->nid)) {
      $comment->content['links']['comment']['#links']['darkmatter-link'] = array(
        'title' => t('not darkmatter'),
        'html' => TRUE,
        'attributes' => array(
          'class' => array('darkmatter-comment-link-' . $comment->cid),
        ),
      );
    }
    else {
      $comment->content['links']['comment']['#links']['darkmatter-link'] = array(
        'title' => $comment->darkmatter ? t('not darkmatter') : t('darkmatter'),
        'href' => "darkmatter/comment/nojs/" . $comment->cid . '/' . darkmatter_token_to_arg(),
        'query' => drupal_get_destination(),
        'attributes' => array(
          'title' => $comment->darkmatter ? t('It is not dark matter!') : t('Mark this content as dark matter.'),
          'class' => array('use-ajax', 'darkmatter-comment-link-' . $comment->cid),
        ),
      );
    }
  }
  if ($comment->darkmatter) {
    $comment->content['comment_body'][0]['#markup'] .= '<div class="darkmatter__overflow"><i class="fa fa-eye-slash"></i></div>';
  }
}

/**
 * Get node status by NID.
 */
function darkmatter_node_status($nid) {
  static $nodes;
  if (!isset($nodes[$nid])) {
    $node = db_select('node', 'n')
      ->fields('n')
      ->condition('nid', $nid)
      ->execute()
      ->fetchAssoc();
    $nodes[$nid] = $node['darkmatter'];
  }
  return $nodes[$nid];
}

/**
 * Checks access to move entity in Dark Matter.
 */
function darkmatter_move_access($comment = NULL) {
  return user_access('darkmatter comments');
}

/**
 * Implements hook_preprocess_comment().
 *
 * Add class darkmatter to comment when applicable.
 */
function darkmatter_preprocess_comment(&$variables) {
  $comment = $variables['comment'];
  if (!empty($comment->darkmatter)) {
    $variables['classes_array'][] = 'darkmatter';
  }
  $variables['classes_array'][] = 'darkmatter-comment-' . $comment->cid;
}

/**
 * Allows to protect the action from CSRF vulnerabilities.
 *
 * @return string
 *   Generate token for "darkmatter" action.
 */
function darkmatter_token_to_arg() {
  $token = &drupal_static(__FUNCTION__);
  if (!isset($token)) {
    $token = drupal_get_token('darkmatter');
  }
  return $token;
}
