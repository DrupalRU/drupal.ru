<?php

/**
 * @file
 */

/**
 * Implements hook_permission().
 */
function dru_tickets_permission() {
  return [
    'dru_tickets view tickets' => [
      'title' => t('View Tickets'),
      'description' => t('Allow users to view tickets'),
      'restrict access' => TRUE,
    ],
    'dru_tickets moderate tickets' => [
      'title' => t('Moderate Tickets'),
      'description' => t('Allow users to moderate tickets'),
      'restrict access' => TRUE,
    ],
    'dru_tickets change any verdict' => [
      'title' => t('Change Any Verdicts'),
      'description' => t('Allow users to change any verdicts'),
      'restrict access' => TRUE,
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function dru_tickets_menu() {

  $items['admin/content/tickets'] = [
    'title' => 'Tickets',
    'description' => 'Tickets page',
    'page callback' => 'dru_tickets_page',
    'access arguments' => ['dru_tickets view tickets'],
    'file' => 'dru_tickets.pages.inc',
  ];
  $items['ticket/%node/accept/%'] = [
    'page callback' => 'dru_ticket_accept',
    'file' => 'dru_tickets.pages.inc',
    'page arguments' => [1, 3],
    'access arguments' => ['dru_tickets moderate tickets'],
    'type' => MENU_CALLBACK,
  ];
  $items['ticket/%node/verdict/nojs/%'] = [
    'page callback' => 'dru_ticket_verdict',
    'file' => 'dru_tickets.pages.inc',
    'page arguments' => [3, 1, 4],
    'access callback' => '_dru_tickets_verdict_access',
    'access arguments' => [1],
    'type' => MENU_CALLBACK,
  ];
  $items['ticket/%node/verdict/ajax/%'] = [
    'page callback' => 'dru_ticket_verdict',
    'file' => 'dru_tickets.pages.inc',
    'page arguments' => [3, 1, 4],
    'access callback' => '_dru_tickets_verdict_access',
    'access arguments' => [1],
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  ];
  $items['admin/moderate/command/%/%/%'] = [
    'page callback' => 'dru_ticket_moderate_command',
    'file' => 'dru_tickets.moderate.inc',
    'page arguments' => [3, 4, 5],
    'access arguments' => ['dru_tickets moderate tickets'],
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_node_info().
 */
function dru_tickets_node_info() {
  return [
    'ticket' => [
      'name' => t('Ticket'),
      'base' => 'dru_tickets',
      'description' => t('Claim rules violation or unacceptable behaviour.'),
      'has_title' => FALSE,
    ],
  ];
}

/**
 * Implement hook_load().
 */
function dru_tickets_load($nodes) {
  $nids = array_keys($nodes);
  $result = db_query('SELECT * FROM {ticket} WHERE ticket_id IN (:nids)', [':nids' => $nids]);
  foreach ($result as $record) {
    $nodes[$record->ticket_id]->ticket = $record;
  }
}

/**
 * Return moderators (user-objects array).
 */
function dru_tickets_get_moderators() {

  $role = user_role_load_by_name('модератор');
  $uids = [];
  $query = 'SELECT DISTINCT(ur.uid) 
    FROM {users_roles} AS ur
    WHERE ur.rid IN (:rid)';
  $result = db_query($query, [':rid' => $role->rid]);
  foreach ($result as $row) {
    $uids[] = $row->uid;
  }

  return user_load_multiple($uids);
}

/**
 * Implement hook_insert().
 */
function dru_tickets_insert($node) {
  db_insert('ticket')
    ->fields([
      'ticket_id' => $node->nid,
      'moderate_uid' => 0,
      'ticket_verdict' => '',
    ])
    ->execute();

  $users = dru_tickets_get_moderators();
  $category = taxonomy_term_load($node->field_claim_category['und'][0]['tid']);

  $theme = $node->title;
  $message = '<strong>';
  $message .= t('Claim text') . ': ';
  $message .= '</strong>';
  $message .= '<br />';
  $message .= $node->body['und'][0]['value'];
  $message .= '<br />';
  $message .= '<br />';
  $message .= '<strong>';
  $message .= t('Category') . ': ';
  $message .= '</strong>';
  $message .= $category->name;
  $message .= '<br />';
  $message .= '<br />';
  $message .= l(t('View ticket'), 'node/' . $node->nid);
  $from = variable_get('site_mail');

  foreach ($users as $user) {
    drupal_mail('dru_tickets', 'dru_tickets', $user->mail, language_default(), [
      'context' => [
        'subject' => $theme,
        'message' => $message,
      ],
      $from,
    ]);
  }
}

/**
 * Implement hook_update().
 */
function dru_tickets_update($node) {
  db_update('ticket')
    ->fields([
      'ticket_id' => $node->nid,
      'moderate_uid' => $node->ticket->moderate_uid,
      'ticket_verdict' => $node->ticket->ticket_verdict,
    ])
    ->condition('ticket_id', $node->nid)
    ->execute();
}

/**
 * Implement hook_view().
 */
function dru_tickets_view($node, $view_mode, $langcode = NULL) {
  drupal_add_js(drupal_get_path('module', 'dru_tickets') . '/dru_tickets.js');

  if (!empty($node->ticket->moderate_uid)) {
    $author = user_load($node->ticket->moderate_uid);
    $moderator = l($author->name, 'user/' . $author->uid);
  }
  else {
    $moderator = t('No taken yet');
  }

  if (!empty($node->ticket->ticket_verdict)) {
    $node->content['verdict'] = [
      '#markup' => '<div class="verdict">
        <div class="label">' . t('Verdict') . ':</div>
        <div class="value">' . check_plain($node->ticket->ticket_verdict) . '</div>
      </div>',
      '#weight' => 10,
    ];
  }
  else {
    $node->content['verdict'] = [
      '#markup' => '<div class="verdict"></div>',
      '#weight' => 10,
    ];
  }

  $node->content['moderator'] = [
    '#markup' => '<div class="moderator">
      <div class="label">' . t('Moderator') . ':</div>
      <div class="value">' . $moderator . '</div>
    </div>',
    '#weight' => 10,
  ];

  return $node;
}

/**
 * Implements hook_comment_view().
 */
function dru_tickets_comment_view($comment, $view_mode) {
  if (user_access('dru_tickets moderate tickets')) {
    if ($comment->status) {
      $unpublish_action = 'unpublish';
      $unpublish_title = t('Unpublish');
    }
    else {
      $unpublish_action = 'publish';
      $unpublish_title = t('Publish');
    }
    $comment->content['links']['comment']['#links']['unpublish'] = [
      'title' => $unpublish_title,
      'href' => 'admin/moderate/command/' . $unpublish_action . '/comment/' . $comment->cid,
      'attributes' => [
        'class' => [
          'use-ajax',
          'moderate-' . $unpublish_action,
          'moderate-' . $unpublish_action . '-' . $comment->cid,
        ],
      ],
    ];
  }
}

/**
 * Implements hook_node_view().
 */
function dru_tickets_node_view($node, $view_mode) {
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');
  $token = drupal_get_token('dru_tickets');

  if ($node->type !== 'ticket' && user_access('dru_tickets moderate tickets')) {
    $action = $node->status ? 'unpublish' : 'publish';
    $title = $node->status ? t('Unpublish') : t('Publish');
    $node->content['links']['comment']['#links']['unpublish'] = [
      'title' => $title,
      'href' => 'admin/moderate/command/' . $action . '/node/' . $node->nid,
      'attributes' => [
        'class' => [
          'use-ajax',
          'moderate-' . $action,
          'moderate-' . $action . '-' . $node->nid,
        ],
      ],
    ];
  }

  if ($node->type == 'ticket' && user_access('dru_tickets moderate tickets')) {
    if ($node->ticket->moderate_uid == 0) {
      $node->content['links']['comment']['#links']['ticket-assign'] = [
        'title' => t('Accept'),
        'href' => 'ticket/' . $node->nid . '/accept' . '/' . $token,
        'attributes' => [
          'class' => ['ticket-accept'],
        ],
      ];
    }
  }

  if (_dru_tickets_verdict_access($node)) {
    $node->content['links']['comment']['#links']['ticket-verdict'] = [
      'title' => $node->ticket->ticket_verdict ? t('Change verdict') : t('Verdict'),
      'href' => 'ticket/' . $node->nid . '/verdict/nojs/' . $token,
      'attributes' => [
        'class' => ['use-ajax', 'ticket-verdict-' . $node->nid],
      ],
    ];
  }
}

/**
 * Implements hook_theme().
 */
function dru_tickets_theme($existing, $type, $theme, $path) {
  $theme = [];
  $theme['node__ticket'] = [
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--ticket',
    'path' => drupal_get_path('module', 'dru_tickets') . '/templates',
  ];
  $theme['node__ticket__teaser'] = [
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--ticket--teaser',
    'path' => drupal_get_path('module', 'dru_tickets') . '/templates',
  ];
  return $theme;
}

/**
 * Check acces to change ticket verdict.
 *
 * @param object $node Ticked node object.
 *
 * @return bool
 */
function _dru_tickets_verdict_access($node) {
  $user = $GLOBALS['user'];

  return $node->type == 'ticket' && !empty($node->ticket) && $node->ticket->moderate_uid != 0 && ((user_access('dru_tickets moderate tickets') &&
      $node->ticket->moderate_uid === $user->uid) || user_access('dru_tickets change any verdict'));
}

/**
 * Implement hook_preprocess_node().
 */
function dru_tickets_preprocess_node(&$vars) {
  if ($vars['type'] == 'ticket') {
    if ($vars['elements']['#view_mode'] == 'teaser') {
      $vars['theme_hook_suggestions'][] = "node__ticket__teaser";
      if (user_access('dru_tickets moderate tickets')) {
        $user = $GLOBALS['user'];
        if ($user->uid == $vars['ticket']->moderate_uid) {
          $vars['classes_array'][] = 'my-ticket';
        }
        if (empty($vars['ticket']->moderate_uid)) {
          $vars['classes_array'][] = 'no-taken-ticket';
        }
      }
    }
  }
}

/**
 * Implements hook_mail
 */
function dru_tickets_mail($key, &$message, $params) {
  if ($key == 'dru_tickets') {
    $message['subject'] = $params['context']['subject'];
    $message['body'][] = $params['context']['message'];
  }
}

/**
 * Implements hook_init().
 */
function dru_tickets_init() {
  drupal_add_css(drupal_get_path('module', 'dru_tickets') . '/dru_tickets.css');
}

/**
 * Implements hook_delete().
 */
function dru_tickets_delete($node) {
  if ($node->type == 'ticket') {
    db_update('node')
      ->fields(['claim' => 0])
      ->condition('claim', $node->nid)
      ->execute();
    db_update('comment')
      ->fields(['claim' => 0])
      ->condition('claim', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_access().
*/
function dru_tickets_node_access($node, $op, $account) {
  // issue #484: Скрыть жалобы от не авторизованных пользователей
  $type = is_object($node) ? $node->type : $node; // https://www.drupal.org/project/drupal/issues/1698532
  if ($type == 'ticket' && !user_is_logged_in()) {
    return NODE_ACCESS_DENY;
  }
}
