<?php

/**
 * @file
 * Install, update, and uninstall functions for tracker.module.
 */

/**
 * Implements hook_uninstall().
 */
function alttracker_uninstall() {
  variable_del('alttracker_index_nid');
  variable_del('alttracker_batch_size');
}

/**
 * Implements hook_enable().
 */
function alttracker_enable() {
  $max_nid = db_query('SELECT MAX(nid) FROM {node}')->fetchField();
  if ($max_nid != 0) {
    variable_set('alttracker_index_nid', $max_nid);
    // To avoid timing out while attempting to do a complete indexing, we
    // simply call our cron job to remove stale records and begin the process.
    alttracker_cron();
  }
}

/**
 * Implements hook_schema().
 */
function alttracker_schema() {
  $schema['alttracker_node'] = array(
    'description' => 'Tracks when nodes were last changed or commented on.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid this record tracks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'published' => array(
        'description' => 'Boolean indicating whether the node is published.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the node was most recently saved or commented on.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'tracker' => array('published', 'changed'),
    ),
    'primary key' => array('nid'),
    'foreign keys' => array(
      'tracked_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
  );

  $schema['alttracker_user'] = array(
    'description' => 'Tracks when nodes were last changed or commented on, for each user that authored the node or one of its comments.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid this record tracks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the node author or commenter.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'published' => array(
        'description' => 'Boolean indicating whether the node is published.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the node was most recently saved or commented on.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'tracker' => array('uid', 'published', 'changed'),
    ),
    'primary key' => array('nid', 'uid'),
    'foreign keys' => array(
      'tracked_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'tracked_user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Move node title settings from field to property variable
 */
function alttracker_update_7001(&$sandbox) {
  $fields = 'alttracker_node_type_fields_';
  $properties = 'alttracker_node_type_properties_';

  $query = db_select('variable', 'v')
    ->fields('v', array('name', 'value'))
    ->condition('name', db_like($fields) . '%', 'LIKE')
    ->execute();

  if ($vars = $query->fetchAll()) {
    foreach ($vars as $var) {
      $type = substr($var->name, strlen($fields));
      $value = unserialize($var->value);

      if (isset($value['title'])) {
        $props = variable_get("{$properties}{$type}", array());
        $props['title'] = TRUE;
        unset($value['title']);
        variable_set("{$fields}{$type}", $value);
        variable_set("{$properties}{$type}", $props);
      }
    }
  }
}
