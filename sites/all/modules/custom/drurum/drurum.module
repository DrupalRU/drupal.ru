<?php

/**
 * @file
 * Variable name which contains flag. If the flag is set to TRUE,
 * then it means that we need to automatically redirect user from
 * 403 page to authorization form. After authorization module
 * login_destination will return back user.
 */

define('DRURUM_LOGIN_WHEN_403', 'drurum_login_when_403');
/**
 * Variable name which contains list of rules for rename actions (menu links).
 */
define('DRURUM_ACTIONS_OVERRIDE', 'drurum_actions_override');

/**
 * Implements hook_module_implements_alter().
 */
function drurum_module_implements_alter(&$implementations, $hook) {
  // Hooks for moving into the end.
  $hooks_to_the_end = ['menu_local_tasks', 'mail_alter'];

  // Move hooks into the end.
  if (in_array($hook, $hooks_to_the_end)) {
    $module = 'drurum';
    $group = $implementations[$module];
    unset($implementations[$module]);
    $implementations[$module] = $group;
  }
}

/**
 * Implements hook_menu().
 */
function drurum_menu() {
  $items['admin/config/system/drupal-ru'] = [
    'title' => 'Drupal.ru customizations',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['drurum_admin_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'drurum.admin.inc',
    'file path' => drupal_get_path('module', 'drurum') . '/includes',
  ];
  return $items;
}

/**
 * Implements hook_help().
 */
function drurum_help($path, $arg) {
  $help = variable_get('drurum_add_organization_help');
  if ($path == 'node/add/organization' && $help) {
    return $help;
  }
}

/**
 * Implements hook_node_access().
 */
function drurum_node_access($node, $op, $account) {
  $access = NODE_ACCESS_IGNORE;
  if ($op == 'update' && !user_access('drurum bypass expiration', $account)) {
    $time = variable_get('drurum_exp_time_' . $node->type, '1 month');
    if ($node->created * 1 < strtotime("-{$time}")) {
      $access = NODE_ACCESS_DENY;
    }
  }
  return $access;
}

/**
 * Implements hook_permission().
 */
function drurum_permission() {
  return [
    'drurum bypass expiration' => [
      'title' => t('Bypass restriction by expiration time'),
      'description' => t('Allowed to edit nodes by default permissions bypassing restrictions by expiration time.'),
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form().
 */
function drurum_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type'])) {
    $type = $form['#node_type']->type;
    $form['workflow']['drurum_exp_time'] = [
      '#type' => 'textfield',
      '#title' => t('Expiration time'),
      '#description' => t('Expiration time, after which editing will be disallowed. The value will be used through function !strtotime.', [
        '!strtotime' => l('strtotime', 'http://php.net/manual/ru/function.strtotime.php'),
      ]),
      '#default_value' => variable_get('drurum_exp_time_' . $type, '1 month'),
    ];
  }
}

/**
 * Implements hook_menu_alter().
 */
function drurum_preprocess_menu_local_action(&$link) {
  // If we have any rules of overriding actions titles, then handle their.
  if (variable_get(DRURUM_ACTIONS_OVERRIDE)) {
    foreach (variable_get(DRURUM_ACTIONS_OVERRIDE) as $action_path => $action_name) {
      $link = &$link['element']['#link'];
      // Override in case when path started from rule.
      if (!empty($link['href']) && strpos($link['href'], $action_path) === 0) {
        $link['element']['#link']['title'] = $action_name;
      }
    }
  }
}

/**
 * Implements hook_query_alter().
 */
function drurum_query_alter(QueryAlterableInterface $query) {
  $tables = $query->getTables();
  $joins = ['n', 'ncs', 'f', 'u', 'u2'];
  // The query at forum page has many joins and we can detect it easy.
  if (count(array_intersect($joins, array_keys($tables))) == 5) {
    // Forum index page requested sorting here.
    if ($query instanceof TableSort) {
      $query->leftJoin('resolved', 'r', 'r.nid = f.nid');
      $query->addField('r', 'resolved');
    }
  }
}

/**
 * Implements hook_query_privatemsg_unread_count_alter().
 */
function drurum_query_privatemsg_unread_count_alter(&$query) {
  $expressions = &$query->getExpressions();
  $expressions['unread_count']['expression'] = 'COUNT(thread_id)';
}

/**
 * Attempts to log in anonymous users before throwing an access denied message.
 */
function drurum_deliver_html_page($page_callback_result) {
  $is_access_denied = $page_callback_result == MENU_ACCESS_DENIED;
  $redirect_enabled = variable_get(DRURUM_LOGIN_WHEN_403, TRUE);

  if ($is_access_denied && $redirect_enabled && user_is_anonymous()) {
    drupal_set_message(t('Please log in to continue'));
    drupal_goto('user/login', [
      'query' => drupal_get_destination(),
    ]);
  }
  else {
    drupal_deliver_html_page($page_callback_result);
  }
}

/**
 * Implements hook_page_delivery_callback_alter().
 */
function drurum_page_delivery_callback_alter(&$callback) {
  // Swap out the page callback for our own.
  if ($callback == 'drupal_deliver_html_page') {
    $callback = 'drurum_deliver_html_page';
  }
}

/**
 * Implements hook_block_info().
 */
function drurum_block_info() {
  $blocks['new'] = [
    'info' => t('New at the forum'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'properties' => [
      'administrative' => TRUE,
    ],
  ];
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function druru_block_configure($delta = '') {
  return forum_block_configure($delta);
}

/**
 * Implements hook_block_save().
 */
function druru_block_save($delta = '', $edit = []) {
  forum_block_save($delta, $edit);
}

/**
 * Implements hook_block_view().
 */
function drurum_block_view($delta = '') {
  global $user;
  $query = db_select('forum_index', 'f')->fields('f')->addTag('node_access');
  $query->leftJoin('node', 'n', 'f.nid = n.nid');
  $query->fields('n', ['type', 'changed']);
  $title = '';
  switch ($delta) {
    case 'active':
      $title = t('Active forum topics');
      $query->orderBy('f.last_comment_timestamp', 'DESC')
        ->range(0, variable_get('forum_block_num_active', '5'));
      break;

    case 'new':
      $title = t('New forum topics');
      $count = drupal_is_front_page() ? 30 : variable_get('forum_block_num_new', 5);
      $query->orderBy('f.created', 'DESC')->range(0, $count);
      break;
  }

  // Attach resolved mark.
  if (module_enable(['resolve'])) {
    $query->leftJoin('resolved', 'r', 'r.nid = f.nid');
    $query->fields('r', ['resolved']);
  }

  $block['subject'] = $title;
  // Cache based on the altered query. Enables us to cache with node access enabled.
  $block['content'] = drupal_render_cache_by_query($query, 'forum_block_view');
  $block['content']['#access'] = user_access('access content');

  $result = $query->execute();
  $node_title_list = drurum_node_title_list($result);
  if ($node_title_list) {
    $block['content'] = [];
    $block['content']['forum_list'] = $node_title_list;
    $block['content']['forum_more'] = [
      '#theme' => 'more_link',
      '#url' => 'forum',
      '#title' => t('Read the latest forum topics.'),
    ];
  }
  return $block;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function drurum_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($data['actions']['output'])) {
    foreach ($data['actions']['output'] as $idx => &$action) {
      if (isset($action['#link']['path']) && 'messages/new' == $action['#link']['path']) {
        unset($data['actions']['output'][$idx]);
      }
    }
  }
}

/**
 * Implements hook_privatemsg_autocomplete_alter().
 */
function drurum_privatemsg_autocomplete_alter(&$matches, $names, $fragment) {
  $select = db_select('pm_block_user', 'pmb')
    ->fields('pmb', ['author'])
    ->condition('pmb.recipient', $GLOBALS['user']->uid);

  // Only show existing users, therefore join users.
  $select->innerJoin('users', 'u', 'u.uid = pmb.author');
}

/**
 * Duplicate of node_title_list() with little changes.
 *
 * @param $result
 * @param null $title
 *
 * @return array|bool
 *
 * @see node_title_list()
 */
function drurum_node_title_list($result, $title = NULL) {
  $items = [];

  foreach ($result as $node) {
    $options = ['html' => TRUE];

    // Add comment count to title.
    if (!empty($node->comment_count)) {
      $node_title = format_plural($node->comment_count, '1 comment', '@count comments');
      $option['attributes']['title'] = $node_title;
    }
    $icon = drurum_node_icon($node);
    $mark = theme('mark', [
      'type' => node_mark($node->nid, $node->changed),
    ]);

    $items[] = l($icon . check_plain($node->title) . $mark, 'node/' . $node->nid, $options);
  }

  return $items ? [
    '#theme' => 'item_list__node',
    '#items' => $items,
    '#title' => $title,
  ] : FALSE;
}

/**
 *
 */
function drurum_node_icon($node) {
  $node_types = &drupal_static(__FUNCTION__, []);
  if (!isset($node_types[$node->nid])) {
    $node_types[$node->nid] = NULL;
    $icon = &$node_types[$node->nid];
    // @todo: make UI for adding rules.
    if (function_exists('druru_icon')) {
      switch (TRUE) {
        // Will be used icon "calendar" for events.
        case !empty($node->type) && $node->type == 'event':
          $icon = 'calendar';
          break;

        // Will be used icon "calendar" for events.
        case !empty($node->type) && $node->type == 'organization':
          $icon = 'building-o';
          break;

        // The question can be resolved. Check it.
        case drurum_can_be_resolved($node) && drurum_need_to_resolve($node->nid):
          $icon = empty($node->resolved) ? 'question-circle-o' : 'check-circle-o';
          break;

        default:
          $icon = 'file-text-o';
          break;
      }
      $icon = druru_icon($icon);
    }
    unset($icon);
  }

  return $node_types[$node->nid];
}

/**
 *
 */
function drurum_need_to_resolve($nid) {
  $resolved = &drupal_static(__FUNCTION__, []);
  if (!isset($resolved[$nid])) {
    $resolved[$nid] = db_select('taxonomy_index', 'ti')
      ->condition('ti.nid', $nid)
        // @todo: to add UI for configure the term id.
      ->condition('ti.tid', 15362)
      ->countQuery()
      ->execute()
      ->fetchField() > 0;
  }
  return $resolved[$nid];
}

/**
 * @param $node
 *
 * @return bool
 */
function drurum_can_be_resolved($node) {
  $func = 'resolved_node_can_be_resolved';
  return function_exists($func) && $func($node);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drurum_form_menu_edit_item_alter(&$form, &$form_state) {
  array_unshift($form['#submit'], 'drurum_form_menu_edit_item_submit');
  $build = $form_state['build_info'];
  $html_allowed = FALSE;
  if (isset($build['args'][1]['options']['html_allowed'])) {
    $html_allowed = $build['args'][1]['options']['html_allowed'];
  }
  $form['html_allowed'] = [
    '#type' => 'checkbox',
    '#title' => 'Html in title',
    '#default_value' => $html_allowed,
  ];
}

/**
 *
 */
function drurum_form_menu_edit_item_submit($form, &$form_state) {
  $vals = &$form_state['values'];
  if (isset($vals['html_allowed'])) {
    $vals['options']['html_allowed'] = $vals['html_allowed'];
  }
}

/**
 * Implements hook_FORM_ID_form_alter().
 */
function drurum_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    $form['forms_help'] = array(
      '#type'        => 'fieldset',
      '#title'       => t('Forms Help'),
      '#collapsible' => TRUE,
    );
    $form['forms_help']['forms_help'] = array(
      '#type'          => 'checkbox',
      '#title'         => t('Show help for all forms'),
      '#description'   => t('This checkbox allow you to see help for all forms.'),
      '#default_value' => !empty($account->data['forms_help']) ? $account->data['forms_help'] : FALSE,
    );
  }
}

/**
 * Implements hook_user_presave().
 */
function drurum_user_presave(&$edit, $account, $category) {
  if (isset($edit['forms_help'])) {
    // Set new value.
    $edit['data']['forms_help'] = $edit['forms_help'];
  }
  elseif (!isset($account->data['forms_help'])) {
    // Use default if none has been set.
    $edit['data']['forms_help'] = variable_get('forms_help_default_status', 1);
  }
}

/**
 * Implements hook_mail_alter().
 */
function drurum_mail_alter(&$message) {
  $message['from'] = $message['from'] ?? variable_get('site_mail');

  if (!empty($message['to']) && filter_var($message['to'], FILTER_VALIDATE_EMAIL)) {
    $message['send'] = $message['send'] ?? FALSE;
  }
  else {
    $message['send'] = FALSE;
    $type = 'drurum-mail';
    $warning = "Couldn't sent message with ID \"%message_id\", from module \"%module\". Parameter \"TO\" was unavailable.";
    $variables = [
      '%message_id' => $message['id'],
      '%module' => $message['module'],
    ];
    watchdog($type, $warning, $variables, WATCHDOG_WARNING);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drurum_form_comment_node_blog_form_alter(&$form, &$form_state, $form_id) {
  hide($form['field_comment_upload']);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function drurum_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['taxonomy_forums'])) {
    $langcode = $form['taxonomy_forums']['#language'];
    // DO NOT Make the vocabulary required for 'real' forum-nodes.
    $form['taxonomy_forums'][$langcode]['#required'] = FALSE;
  }
}
