<?php

/**
 * @File Allow to add polls to any node types.
 * @Author Romka <mne@romka.eu>.
 * @Copyright Romka <mne@romka.eu>.
 * @License GPL v2.
 * @Port in drupal 7: Kasikhin Vyacheslav aka Irbis <sonwol@yandex.ru>, www.aquanther.ru.
 */

// Номер вопроса в БД в таблице вопросов и ответов: inner_poll_choices, в столбце chorder.
define('ANSWER_PROPERTY', 999);

/**
 * Implements hook_permission().
 *
 * Определение прав доступа пользователей.
 */
function inner_poll_permission() {
  $perms = array(
    'create inner polls' => array(
      'title' => t('Create inner polls'),
    ),
    'edit all inner polls' => array(
      'title' => t('Edit all inner polls'),
    ),
    'edit own inner poll' => array(
      'title' => t('Edit own inner poll'),
    ),
    'vote on inner polls' => array(
      'title' => t('Vote on inner polls'),
    ),
    'cancel own inner poll vote' => array(
      'title' => t('Cancel own inner poll vote'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_menu().
 *
 * Программно создаём URL и задаём функции генерации страниц при запросе данных URL.
 */
function inner_poll_menu() {
  $items = array();

  // меню  возвращает данные для аяксовой подгрузки данных об устройствах, удовлетворяющих фильтру.
  $items['inner_poll/vote_js'] = array(
    'title' => 'Inner poll vote js',
    'page callback' => 'inner_poll_vote_js',
    'access arguments' => array('vote on inner polls'),
    'type' => MENU_CALLBACK,
  );

  $items['inner_poll/cancel_vote'] = array(
    'title' => 'Inner poll cancel vote',
    'page callback' => 'inner_poll_cancel_vote',
    'access arguments' => array('cancel own inner poll vote'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/user-interface/inner-poll'] = array(
    'title' => 'Inner poll',
    'description' => 'Configure inner poll.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inner_poll_settings'),
    'access arguments' => array('administer site configuration')
  );

  return $items;
}

/**
 * Admin interface.
 *
 * Обработка логики и отображение страницы настройки модуля по URL: /admin/config/user-interface/inner-poll, заданного в hook_menu().
 */
function inner_poll_settings() {
  $options = array();

  // Получаем доступные типы нод.
  foreach (node_type_get_types() as $type => $name) {
    $options[$type] = $type;
  }

  $values = variable_get('inner_poll_content_types', array());

  // Content types for inner_poll.
  $form['inner_poll_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select node types for inner poll:'),
    '#default_value' => $values,
    '#options' => $options,
  );

  // Width of div which contain poll form.
  $form['inner_poll_div_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width of div which contain poll form'),
    '#default_value' => variable_get('inner_poll_div_width', 300),
    '#maxlength' => 3,
    '#required' => TRUE,
  );

  // Minimum question length.
  $form['inner_poll_question_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum question length'),
    '#default_value' => variable_get('inner_poll_question_length', 1),
    '#maxlength' => 3,
    '#required' => TRUE,
  );

  // Show polls in teasers?
  $form['inner_poll_in_teaser'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show polls in teasers.'),
    '#default_value' => variable_get('inner_poll_in_teaser', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 *
 * Вносим изменения в форму создания ноды перед её показом, для отображения формы создания опроса.
 */
function inner_poll_form_alter(&$form, $form_state, $form_id) {
  global $user;

  $show = FALSE;
  // Количество ответов на вопрос.
  $counter = 0;

  // Загрузка данных флага о том: разрешены опросы или нет для данного типа контента.
  $ipct = variable_get('inner_poll_content_types', array());
  foreach ($ipct as $type => $name) {
    if ($ipct[$type] . '_node_form' == $form_id) {
      $show = TRUE;
    }
  }

  if ($show && user_access('create inner polls')) {
    $choice = array();
    $attr = array();

    // Если нода открыта для редактирования, а не создаётся новая нода.
    if (arg(2) == "edit" && is_numeric(arg(1))) {
      $nid = arg(1);

      $node = db_select('node', 'n')
        ->fields('n', array('uid'))
        ->condition('n.nid', $nid)
        ->execute()
        ->fetchObject();

      $result = db_select('inner_poll_choices', 'n')
        ->fields('n')
        ->condition('n.nid', arg(1))
        ->execute();

      foreach ($result as $ipc) {
        if ($ipc->chorder != ANSWER_PROPERTY) {
          $choice[$counter] = $ipc;

          $ipc_count = db_select('inner_poll_choices', 'n')
            ->fields('n', array('chvotes'))
            ->condition('n.nid', $nid)
            ->condition('n.chorder', $ipc->chorder)
            ->execute()
            ->fetchObject();

          // Если у пользователя имеется разрешение на редактирование всех опросов.
          //
          // Или если ноду редактирует её автор и у него стоит разрешение на редактирование собственных нод,
          //   а так же ещё не выбран не один ответ на данный опрос. Если за данное поле уже проголосовали,
          //   то у него выставляется атрибут - только для чтения.
          if (user_access('edit all inner polls') || $node->uid == $user->uid && user_access('edit own inner poll') && $ipc_count->chvotes == 0) {
            $attr[$counter] = array();
          }
          else {
            $attr[$counter] = array('readonly' => TRUE);
          }

          $counter++;
        }
        else {
          $choice[ANSWER_PROPERTY] = $ipc;

          $query = db_select('inner_poll_choices', 'n');
          $query->addExpression('SUM(n.chvotes)');
          $query->condition('n.nid', $nid);
          $query->condition('n.chorder', ANSWER_PROPERTY, '<>');
          $ipc_count = $query->execute()->fetchField();

          if (user_access('edit all inner polls') || $node->uid == $user->uid && user_access('edit own inner poll') && $ipc_count == 0) {
            $attr[ANSWER_PROPERTY] = array();
          }
          else {
            $attr[ANSWER_PROPERTY] = array('readonly' => TRUE);
          }
        }
      }
    }

    // Дополнительная проверка, что это именно нода.
    if (isset($form['type']) && isset($form['#node'])) {

      // Сворачивающийся блок.
      $form['inner_poll'] = array(
        '#type' => 'fieldset',
        '#access' => user_access('create inner polls'),
        '#title' => t('Attach poll'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#description' => t('Create poll attached to this node.'),
        '#weight' => 30,
      );

      // Вопрос.
      $form['inner_poll']['question'] = array(
        '#type' => 'textfield',
        '#weight' => 0,
        '#description' => t('question'),
        '#default_value' => isset($choice[ANSWER_PROPERTY]->chtext) ? $choice[ANSWER_PROPERTY]->chtext : '',
        '#attributes' => isset($attr[ANSWER_PROPERTY]) ? $attr[ANSWER_PROPERTY] : '',
      );

      // Add a wrapper for the choices and more button.
      // Регион с полями для вопросов и кнопкой добавления дополнительных полей вопросов.
      $form['inner_poll']['choice_wrapper'] = array(
        '#tree' => FALSE,
        '#weight' => 1,
        '#prefix' => '<div class="clear-block" id="inner-poll-choice-wrapper">',
        '#suffix' => '</div>',
      );

      if ($counter == 0) {
        $counter = 1;
      }
      else {
        $counter--;
      }

      // Конкретное поле для вопроса.
      for ($i = 0; $i <= $counter; $i++) {
        $form['inner_poll']['choice_wrapper']['choice_' . $i] = array(
          '#type' => 'textfield',
          '#tree' => TRUE,
          '#weight' => $i,
          '#description' => check_plain(t('choice') . " " . ($i + 1)),
          '#default_value' => isset($choice[$i]->chtext) ? $choice[$i]->chtext : '',
          '#attributes' => isset($attr[$i]) ? $attr[$i] : '',
        );
      }

      // Подключаем JavaScript файл для добавления дополнительных полей вопросов.
      $path = drupal_get_path('module', 'inner_poll');
      drupal_add_js($path . '/vote_form.js');

      // Регион для добавления дополнительных полей вопросов и кнопкой добавления дополнительных полей вопросов.
      $form['inner_poll']['choice_wrapper']['inner_poll_new_id'] = array(
        '#type' => 'hidden',
        '#value' => ($counter + 1),
        '#weight' => ($counter + 1),
        '#attributes' => array('id' => 'edit-inner-poll-new-id'),
        '#suffix' => '<div id="inner_poll_new_fields"></div>
                        <div id="inner_poll_add_field_link"><a href="javascript:{}" onClick="addFormField(); return false;">' . t('Add answer') . '</a></div><br>',
      );

      // Загрузка настроек полей для редактируемой ноды.
      $inr_pl = db_select('inner_poll', 'n')
        ->fields('n')
        ->condition('n.nid', arg(1))
        ->execute()
        ->fetchObject();

      // Может ли пользователь выбрать несколько вариантов ответов.
      $form['inner_poll']['multi'] = array(
        '#type' => 'checkbox',
        '#weight' => 20,
        '#title' => t('Multiply select?'),
        '#default_value' => isset($inr_pl->type) ? $inr_pl->type : '',
      );

      // Может ли пользователь отменить свой голос.
      $form['inner_poll']['cancel'] = array(
        '#type' => 'checkbox',
        '#weight' => 25,
        '#title' => t('Users can cancel own votes?'),
        '#default_value' => isset($inr_pl->cancel) ? $inr_pl->cancel : '',
      );

      // Открыт или закрыт опрос.
      $inr_pl_active = array(0 => t('Closed'), 1 => t('Active'));
      $form['inner_poll']['active'] = array(
        '#type' => 'radios',
        '#title' => t('Poll status:'),
        '#weight' => 35,
        '#default_value' => isset($inr_pl->active) ? $inr_pl->active : 1,
        '#options' => $inr_pl_active,
        '#description' => t('When the poll is closed, visitors can not longer vote for it.')
      );

      // Продолжительность опроса.
      $inr_pl_duration = array(0 => t('Unlimited')) + drupal_map_assoc(array(
        86400,
        172800,
        345600,
        604800,
        1209600,
        2419200,
        4838400,
        9676800,
        31536000
      ), "format_interval");
      $form['inner_poll']['runtime'] = array(
        '#type' => 'select',
        '#title' => t('Poll duration:'),
        '#weight' => 40,
        '#default_value' => isset($inr_pl->runtime) ? $inr_pl->runtime : 0,
        '#options' => $inr_pl_duration,
        '#description' => t('After this period, the poll will be closed automatically.'),
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * Обработка события создания ноды.
 */
function inner_poll_node_insert($node) {
  _add_new_poll($node);
}

/**
 * Implements hook_node_update().
 *
 * Обработка события обновления ноды.
 */
function inner_poll_node_update($node) {
  _update_poll($node);
}

/**
 * Implements hook_node_load().
 *
 * Обработка события загрузки ноды.
 */
function inner_poll_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    // Добавление пользовательского атрибута к ноде.
    $node->inner_poll = 'Poll form.';
  }

  return $node;
}

/**
 * Implements hook_node_view().
 *
 * Обработка события просмотра ноды.
 */
function inner_poll_node_view($node, $view_mode) {
  if ($view_mode == 'full') {
    // Полный просмотр ноды.
    $node->content['inner_poll'] = array(
      '#markup' => theme('inner_poll_vote_form', array(
        'nid' => $node->nid,
        'ip_tiser_view' => 0,
        'message' => ''
      )),
      '#weight' => 100,
    );
  }
  else {
    // Тизер.
    $node->content['inner_poll'] = array(
      '#markup' => theme('inner_poll_vote_form', array(
        'nid' => $node->nid,
        'ip_tiser_view' => 1,
        'message' => ''
      )),
      '#weight' => 100,
    );
  }

  return $node;
}

/**
 * Implements hook_node_delete().
 *
 * Обработка события удаления ноды.
 */
function inner_poll_node_delete($node) {
  db_delete('inner_poll')
    ->condition('nid', $node->nid)
    ->execute();

  db_delete('inner_poll_choices')
    ->condition('nid', $node->nid)
    ->execute();

  db_delete('inner_poll_votes')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Функция создания нового опроса, вызывается в hook_node_insert().
 */
function _add_new_poll($node) {
  if (user_access('create inner polls')) {
    $choices = array();
    $counter = 0;
    $question = isset($_POST['question']) ? trim($_POST['question']) : '';

    if (strlen($question) >= variable_get('inner_poll_question_length', 1)) {
      $counter++;
    }
    elseif (!empty($question)) {
      form_set_error("question", t("If you want to create poll you must type minimum 6 simbols in quiestion field. Poll dont save. Edit your node, to create poll."));
      exit();
    }

    foreach ($_POST as $key => $value) {
      if (strstr($key, "choice_")) {
        $val = trim(check_plain($value));
        if (strlen($val) > 0) {
          $counter++;
          $choices[] = $val;
        }
      }
    }

    if ($counter != 0) {
      if ($counter < 2 || strlen($question) < variable_get('inner_poll_question_length', 1)) {
        form_set_error("question", "if you want to create poll you must enter question and minimum to choices. " . $counter);
        exit();
      }
      else {
        if (isset($_POST['multi'])) {
          $type = 1;
        }
        else {
          $type = 0;
        }

        if (isset($_POST['cancel'])) {
          $cancel = 1;
        }
        else {
          $cancel = 0;
        }

        if (isset($_POST['active'])) {
          $active = trim(check_plain($_POST['active']));
        }
        else {
          $active = 0;
        }

        db_insert('inner_poll')
          ->fields(array(
          'nid' => $node->nid,
          'runtime' => trim(check_plain($_POST['runtime'])),
          'active' => $active,
          'type' => $type,
          'cancel' => $cancel
        ))
          ->execute();

        for ($i = 0; $i <= count($choices) - 1; $i++) {
          db_insert('inner_poll_choices')
            ->fields(array(
            'nid' => $node->nid,
            'chtext' => $choices[$i],
            'chvotes' => 0,
            'chorder' => $i
          ))
            ->execute();
        }

        db_insert('inner_poll_choices')
          ->fields(array(
          'nid' => $node->nid,
          'chtext' => $question,
          'chvotes' => 0,
          'chorder' => ANSWER_PROPERTY
        ))
          ->execute();
      }
    }
  }
  else {
    if ($node->moderate) {
      drupal_set_message(t('The post is queued for approval. The editors will decide whether it should be published.'));
    }
  }
}

/**
 * Функция обновления опроса, вызывается в hook_node_update().
 */
function _update_poll($node) {
  global $user;

  if (user_access('edit all inner polls') || $node->uid == $user->uid && user_access('edit own inner poll')) {

    if (isset($_POST['multi'])) {
      $type = 1;
    }
    else {
      $type = 0;
    }

    if (isset($_POST['cancel'])) {
      $cancel = 1;
    }
    else {
      $cancel = 0;
    }

    if (isset($_POST['active'])) {
      $active = trim(check_plain($_POST['active']));
    }
    else {
      $active = 0;
    }

    $choices = array();
    $counter = 0;

    if (isset($_POST['question'])) {
      $question = trim(check_plain($_POST['question']));
    }
    else {
      $question = '';
    }

    if (strlen($question) >= variable_get('inner_poll_question_length', 1)) {
      $counter++;
    }

    foreach ($_POST as $key => $value) {
      if (strstr($key, "choice_")) {
        $counter++;
        $choices[] = trim(check_plain($value));
      }
    }

    $length = variable_get('inner_poll_question_length', 1);
    if ($counter || strlen($question)) {
      if (($counter > 0 && $counter < 2) || strlen($question) < $length) {
        form_set_error("question", t('If you want to create poll you must enter question and minimum to choices. @counter', array('@counter' => $counter)));
      }
      else {
        // Перебираем все ответы на вопрос и пересохраняем их.
        for ($i = 0; $i <= count($choices) - 1; $i++) {
          // Если ответ существует (переданное в POST поле не пусто), то сохраняем его. Иначе удаляем.
          if (strlen($choices[$i]) > 0) {
            $count = db_select('inner_poll_choices', 'n')
              ->condition('n.chorder', $i)
              ->condition('n.nid', $node->nid)
              ->countQuery()
              ->execute()
              ->fetchField();

            // Добавляем или обновляем данные в зависимости от того существует или нет запись с данным вопросом.
            if ($count == 0) {
              db_insert('inner_poll_choices')
                ->fields(array(
                  'nid' => $node->nid,
                  'chtext' => $choices[$i],
                  'chvotes' => 0,
                  'chorder' => $i,
                ))
                ->execute();
            }
            else {
              db_update('inner_poll_choices')
                ->fields(array('chtext' => $choices[$i]))
                ->condition('nid', $node->nid)
                ->condition('chorder', $i)
                ->execute();
            }
          }
          else {
            db_delete('inner_poll_choices')
              ->condition('nid', $node->nid)
              ->condition('chorder', $i)
              ->execute();
          }
        }

        // Обновляем или добавляем вопрос (в случае если он несоздавался при создании ноды, а был добавлен позже).
        $count = db_select('inner_poll_choices', 'n')
          ->condition('n.chorder', ANSWER_PROPERTY)
          ->condition('n.nid', $node->nid)
          ->countQuery()
          ->execute()
          ->fetchField();

        if ($count > 0) {
          db_update('inner_poll_choices')
            ->fields(array('chtext' => $question))
            ->condition('nid', $node->nid)
            ->condition('chorder', ANSWER_PROPERTY)
            ->execute();
        }
        else {
          db_insert('inner_poll_choices')
            ->fields(array(
              'nid' => $node->nid,
              'chtext' => $question,
              'chvotes' => 0,
              'chorder' => ANSWER_PROPERTY,
            ))
            ->execute();
        }

        // Обновляем или добавляем данные о вопросе (в случае если он несоздавался при создании ноды, а был добавлен позже).
        $count = db_select('inner_poll', 'n')
          ->fields('n', array('nid'))
          ->condition('n.nid', $node->nid)
          ->execute()
          ->fetchField();

        if ($count == 0) {
          db_insert('inner_poll')
            ->fields(array(
              'nid' => $node->nid,
              'runtime' => trim(check_plain($_POST['runtime'])),
              'active' => $active,
              'type' => $type,
              'cancel' => $cancel
            ))
            ->execute();
        }
        else {
          db_update('inner_poll')
            ->fields(array(
              'type' => $type,
              'cancel' => $cancel,
              'active' => $active,
              'runtime' => trim(check_plain($_POST['runtime']))
            ))
            ->condition('nid', $node->nid)
            ->execute();
        }
      }
    }
  }
}

/**
 * Page AJAX callback.
 *
 * Обработка логики и отображение страницы по URL: /inner_poll/vote_js, заданного в hook_menu().
 */
function inner_poll_vote_js() {
  if (!isset($_POST['n'])) {
    exit();
  }

  if ((!isset($_POST['v'])) and (!isset($_POST['abstain']))) {
    exit();
  }

  $output = "err";

  global $user;

  $nid = trim(check_plain($_POST['n']));

  $save_vote = FALSE;

  if ($user->uid != 0) {
    $count = db_select('inner_poll_votes', 'n')
      ->condition('n.nid', $nid)
      ->condition('n.uid', $user->uid)
      ->countQuery()
      ->execute()
      ->fetchField();

    if ($count == 0) {
      $save_vote = TRUE;
    }
  }
  else {
    $counter = 0;
    $ip = ip_address();

    $result = db_select('inner_poll_votes', 'n')
      ->fields('n', array('hostname'))
      ->condition('n.nid', '$nid')
      ->condition('n.uid', $user->uid)
      ->execute();

    foreach ($result as $row) {
      if ($ip == $row->hostname) {
        $counter++;
      }
    }

    if ($counter > 0) {
      $save_vote = FALSE;
    }
    else {
      $save_vote = TRUE;
    }
  }

  if ($save_vote) {

    $post_abst = FALSE;

    // Если пользователь воздержался от выбора.
    if (isset($_POST['abstain'])) {
      if ($_POST['abstain'] == 1) {
        $post_abst = TRUE;
      }
    }

    if ($post_abst == TRUE) {
      db_insert('inner_poll_votes')
        ->fields(array(
        'nid' => $nid,
        'uid' => $user->uid,
        'chorder' => ANSWER_PROPERTY,
        'hostname' => ip_address()
      ))
        ->execute();

      $output = theme('inner_poll_vote_form', array(
        'nid' => $nid,
        'ip_tiser_view' => 0,
        'message' => t('You abstain')
      ));
    }
    else {
      $value = trim(check_plain($_POST['v']));

      if (strstr($value, ";")) {
        $votes = explode(";", $value);
      }
      else {
        $votes[0] = "";
        $votes[1] = $value;
      }

      for ($i = 1; $i <= count($votes) - 1; $i++) {
        db_insert('inner_poll_votes')
          ->fields(array(
          'nid' => $nid,
          'uid' => $user->uid,
          'chorder' => $votes[$i],
          'hostname' => ip_address()
        ))
          ->execute();

        db_update('inner_poll_choices')
          ->expression('chvotes', 'chvotes + 1')
          ->condition('nid', $nid)
          ->condition('chorder', $votes[$i])
          ->execute();
      }

      $output = theme('inner_poll_vote_form', array(
        'nid' => $nid,
        'ip_tiser_view' => 0,
        'message' => t('Your vote accepted')
      ));
    }
  }
  else {
    $output = t('You alredy vote on this poll');
  }

  drupal_json_output(array('result' => $output));
}

/**
 * AJAX callback for cancel vote.
 *
 * Обработка логики и отображение страницы по URL: /inner_poll/cancel_vote, заданного в hook_menu().
 */
function inner_poll_cancel_vote() {
  if (!isset($_POST['n'])) {
    exit();
  }

  $output = "err";

  $nid = (int) check_plain($_POST['n']);

  $act_active = db_select('inner_poll', 'n')
    ->fields('n', array('active'))
    ->condition('n.nid', $nid)
    ->execute()
    ->fetchObject();

  if (user_access('cancel own inner poll vote') && $act_active->active = 1) {
    global $user;
    if ($user->uid != 0) {

      $result = db_select('inner_poll_votes', 'n')
        ->fields('n', array('chorder'))
        ->condition('n.nid', $nid)
        ->condition('n.uid', $user->uid)
        ->execute();

      foreach ($result as $row) {
        if ($row->chorder != ANSWER_PROPERTY) {
          db_update('inner_poll_choices')
            ->expression('chvotes', 'chvotes - 1')
            ->condition('nid', $nid)
            ->condition('chorder', $row->chorder)
            ->execute();
        }
      }

      db_delete('inner_poll_votes')
        ->condition('nid', $nid)
        ->condition('uid', $user->uid)
        ->execute();
    }
    else {
      $ip_add = ip_address();

      $result = db_select('inner_poll_votes', 'n')
        ->fields('n', array('chorder'))
        ->condition('n.nid', $nid)
        ->condition('n.uid', $user->uid)
        ->condition('n.hostname', $ip_add)
        ->execute();

      foreach ($result as $row) {
        if ($row->chorder != ANSWER_PROPERTY) {
          db_update('inner_poll_choices')
            ->expression('chvotes', 'chvotes - 1')
            ->condition('nid', $nid)
            ->condition('chorder', $row->chorder)
            ->execute();
        }
      }

      db_delete('inner_poll_votes')
        ->condition('nid', $nid)
        ->condition('uid', $user->uid)
        ->condition('hostname', $ip_add)
        ->execute();
    }

    $output = theme('inner_poll_vote_form', array(
      'nid' => $nid,
      'ip_tiser_view' => 0,
      'message' => t('Your vote was deleted')
    ));

  }

  drupal_json_output(array('result' => $output));
}

/**
 * Implements hook_theme().
 *
 * Регистрирация процедуры темизации модуля.
 */
function inner_poll_theme() {
  return array(
    'inner_poll_vote_form' => array(
      'variables' => array(
        'nid' => NULL,
        'ip_tiser_view' => NULL,
        'message' => NULL
      ),
    ),
  );
}


/**
 * Rendering of vote form..
 *
 * Реализация темизации.
 *
 * $node - нода.
 * $ip_tiser_view - рендеринг тизера.
 * $message - сообщение выводимое пользователю.
 */
function theme_inner_poll_vote_form($variables) {
  $output = '';

  global $user;

  // Оборачиваем сообщение в <div>.
  if (strlen($variables['message']) > 0) {
    $variables['message'] = "<div class=\"messages status\">" . $variables['message'] . "</div>";
  }

  $count = db_select('inner_poll', 'n')
    ->condition('n.nid', $variables['nid'])
    ->countQuery()
    ->execute()
    ->fetchField();

  // Если данная нода имеет опрос и если это не тизер материала.
  // или
  // Если данная нода имеет опрос, это тизер материала и разрешено отображение в тизере материала.
  if (($count >= 1 && $variables['ip_tiser_view'] != 1) or ($count >= 1 && variable_get('inner_poll_in_teaser', FALSE))) {

    // Если пользователю разрешено голосовать.
    if (user_access('vote on inner polls')) {

      // Добавление JavaScript и CSS кода к странице.
      $path = drupal_get_path('module', 'inner_poll');
      drupal_add_js($path . '/vote.js');
      drupal_add_js(array('sPath' => $_SERVER['HTTP_HOST']), 'setting');
      drupal_add_css($path . '/inner_poll.css');

      // Check vote user on this poll or not.
      // Проверим голосовал пользователь в данном опросе или нет.
      $user_alredy_vote = FALSE;
      if ($user->uid != 0) {
        $count_ipv = db_select('inner_poll_votes', 'n')
          ->condition('n.nid', $variables['nid'])
          ->condition('n.uid', $user->uid)
          ->countQuery()
          ->execute()
          ->fetchField();
      }
      else {
        $count_ipv = db_select('inner_poll_votes', 'n')
          ->condition('n.nid', $variables['nid'])
          ->condition('n.hostname', ip_address())
          ->condition('n.uid', 0)
          ->countQuery()
          ->execute()
          ->fetchField();
      }

      if ($count_ipv != 0) {
        $user_alredy_vote = TRUE;
      }

      $active_ip = db_select('inner_poll', 'n')
        ->fields('n', array('active'))
        ->condition('n.nid', $variables['nid'])
        ->execute()
        ->fetchField();

      // Question.
      $chtext_ipc = db_select('inner_poll_choices', 'n')
        ->fields('n', array('chtext'))
        ->condition('n.chorder', ANSWER_PROPERTY)
        ->condition('n.nid', $variables['nid'])
        ->execute()
        ->fetchField();

      if (!$user_alredy_vote && $active_ip) {
        $form = drupal_get_form('inner_poll_form', $variables['nid']);
        // User not vote, show form.
        // Пользователь не голосовал, отображаем форму.
        $output = "<div class=\"inner_poll jumbotron\" id=\"inner_poll_" . $variables['nid'] . "\">
                    " . $variables['message'] . "
                    <h2>" . t('Attached poll') . ' «' . $chtext_ipc . '»:</h2>
                    <div id=poll_form>' . drupal_render($form) . "</div>
                  </div>";
      }
      else {
        // User vote, show results.
        // Пользователь голосовал, отображаем результат.

        // Current user answers.
        // Текущий выбор ответа данного пользователя.
        if ($user->uid != 0) {
          $query = db_select('inner_poll_choices', 'c');
          $query->innerJoin('inner_poll_votes', 'v', 'c.nid = v.nid');
          $query->fields('c', array('chtext'));
          $query->fields('v', array('chorder'));
          $query->condition('c.nid', $variables['nid']);
          $query->condition('v.uid', $user->uid);
          $query->where('c.chorder = v.chorder');
          $result_ipc = $query->execute();
        }
        else {
          $query = db_select('inner_poll_choices', 'c');
          $query->innerJoin('inner_poll_votes', 'v', 'c.nid = v.nid');
          $query->fields('c', array('chtext'));
          $query->fields('v', array('chorder'));
          $query->condition('c.nid', $variables['nid']);
          $query->condition('v.hostname', ip_address());
          $query->condition('v.uid', 0);
          $query->where('c.chorder = v.chorder');
          $result_ipc = $query->execute();
        }

        $user_votes = array();

        foreach ($result_ipc as $row) {
          if ($row->chorder != ANSWER_PROPERTY) {
            $user_votes[] = $row->chtext;
          }
          else {
            $user_votes[] = t('You abstain');
          }
        }

        $width = variable_get('inner_poll_div_width', 300);
        if (!is_numeric($width)) {
          $width = 300;
        }

        $results = array();
        $i = 0;
        $sum = 0;

        // Answers.
        // Выборы ответов.
        $result_answers = db_select('inner_poll_choices', 'n')
          ->fields('n')
          ->condition('n.chorder', ANSWER_PROPERTY, '<>')
          ->condition('n.nid', $variables['nid'])
          ->execute();

        // Загрузка ответов и голосов за них.
        foreach ($result_answers as $row_answers) {
          $sum += $row_answers->chvotes;
          $results[$i]['text'] = $row_answers->chtext;
          $results[$i]['votes'] = $row_answers->chvotes;

          if ($i == 0) {
            $max = $i;
          }
          else {
            if ($results[$i]['votes'] > $results[$i - 1]['votes']) {
              $max = $i;
            }
          }

          $i++;
        }

        $res = "<div class=\"inner_poll_container\">";

        // Отображаем ответы и количество голосов за них.
        for ($i = 0; $i <= count($results) - 1; $i++) {
          if ($sum != 0) {
            $width_results = ($width * $results[$i]['votes'] / $sum);
            $percent = round(($results[$i]['votes'] / $sum) * 100, 2);
          }
          else {
            $width_results = 1;
            $percent = 0;
          }

          $res .= "<div class=\"inner_poll_line\">
                     <div class=\"inner_poll_result\">
                       <div class=\"percent\">" . $percent . "%</div>
                       <div class=\"points\">(" . $results[$i]['votes'] . ")</div>
                     </div>
                     <div class=\"inner_poll_answer_wrapper\">
                       <div class=\"inner_poll_answer\">" . $results[$i]['text'] . "</div>
                       <div class=\"inner_poll_grafic" . ($max == $i ? " inner_poll_max_result" : "") . "\" style=\"width: " . $width_results . "px\"></div>
                     </div>
                   </div>
                   <div style=\"clear: both;\"></div>\n";
        }

        $res .= "</div>";

        $result_ip = db_select('inner_poll', 'n')
          ->fields('n', array('cancel'))
          ->condition('n.nid', $variables['nid'])
          ->execute()
          ->fetchField();

        $cancel_link = "";

        // Отображение ссылки на прекращение опроса.
        if ($result_ip == 1 && user_access('cancel own inner poll vote') && $active_ip == 1) {
          $cancel_link = '<div class="form-actions">';
          $cancel_link .= '<input class="btn btn-danger" type="button" onclick="javascript:cancel_vote(' . $variables['nid'] . ');" value=' . t('Cancel') . '>';
          $cancel_link .= '</div>';
        }

        // Общие количество проголосовавших.
        if ($active_ip) {
          $text = t('You are already voted this poll, your answer is:') . ' ' . implode(", ", $user_votes) . '.';
        }
        else {
          $text = t('This poll is closed');
        }

        // Количество воздержавшихся.
        $count_abs = db_select('inner_poll_votes', 'n')
          ->condition('n.nid', $variables['nid'])
          ->condition('n.chorder ', ANSWER_PROPERTY)
          ->countQuery()
          ->execute()
          ->fetchField();

        // Итоговый результат.
        $output = "<div class=\"inner_poll jumbotron\" id=\"inner_poll_" . $variables['nid'] . "\">
                     " . $variables['message'] . "
                     <h2>" . t('Attached poll') . " «" . $chtext_ipc . "»:</h2>";

        if ($active_ip) {
          $output .= "<div class=\"alredy_vote\">" . $text . "</div>";
        }

        $output .= "<h3 class=\"results \">" . t('Results') . ":</h3>" . $res . "
                     <div class=\"total_votes\">" . t('All votes') . ": " . $sum . ".</div>";

        if ($count_abs > 0) {
          $output .= "<div class=\"abs_votes\">" . t('All abstain') . ": " . $count_abs . ".</div>";
        }

        if (!$active_ip) {
          $output .= "<div class=\"alredy_vote\">" . $text . ".</div>";
        }

        $output .= "<div class=\"cancel_votes\">" . $cancel_link . "</div>
                   </div>";
      }
    }
    else {
      $chtext_ipc = db_select('inner_poll_choices', 'n')
        ->fields('n', array('chtext'))
        ->condition('n.chorder', ANSWER_PROPERTY)
        ->condition('n.nid', $variables['nid'])
        ->execute()
        ->fetchField();

      $result = db_select('inner_poll_choices', 'n')
        ->fields('n')
        ->condition('n.chorder', ANSWER_PROPERTY, '<>')
        ->condition('n.nid', $variables['nid'])
        ->execute();

      $res = "<ul>";
      foreach ($result as $row) {
        $res .= '<li>';
        $res .= $row->chtext;
        $res .= ' ';
        $res .= t('%votes', array(
          '%votes' => format_plural($row->chvotes, '1 vote', '@count votes')
          ));
        $res .= '</li>';
      }
      $res .= '</ul>';

        // Итоговый результат.
      $output = "<div class='inner_poll jumbotron' id='inner_poll_{$variables['nid']}'>{$variables['message']}";
      $output .= "<h2>" . t('Attached poll') . " «" . $chtext_ipc . "»:</h2>";

      $output .= $res;

      $output .= "<div class='inner-poll-unauthorized'>";
      $output .= t('<a href="@login">Log in</a> or <a href="@register">register</a> to vote', array(
        '@login'    => url('user/login'),
        '@register' => url('user/register'),
      ));
      $output .= "</div>";

      $output .= "</div>";

    }
  }

  return $output;
}

/**
 * Вызывается в theme_inner_poll_vote_form().
 */
function inner_poll_form($form, &$form_state, $ip_nid) {
  $count = db_select('inner_poll', 'n')
    ->condition('n.nid', $ip_nid)
    ->condition('n.active', 1)
    ->countQuery()
    ->execute()
    ->fetchField();

  if ($count != 0) {
    $counter = 0;
    $radios = array();

    $result = db_select('inner_poll', 'n')
      ->fields('n', array('type'))
      ->condition('n.nid', $ip_nid)
      ->execute()
      ->fetchField();

    if ($result == 1) {
      $type = 'checkboxes';
    }
    else {
      $type = 'radios';
    }

    $result = db_select('inner_poll_choices', 'n')
      ->fields('n')
      ->condition('n.nid', $ip_nid)
      ->execute();

    foreach ($result as $row) {
      if ($row->chorder != ANSWER_PROPERTY) {
        $radios[$row->chorder] = $row->chtext;
      }
    }

    $form['choice'] = array(
      '#type' => $type,
      '#options' => $radios,
      '#weight' => -5,
    );

    $form['button'] = array(
      '#type' => 'hidden',
      '#suffix' => '<input type=button onclick="javascript:vote(this.form, ' . $ip_nid . ');" value=' . t('Vote') . '>',
      '#weight' => -4,
    );

    $form['abstain'] = array(
      '#type' => 'hidden',
      '#suffix' => '<input type=button onclick="javascript:abst(' . $ip_nid . ');" value=' . t('Abstain') . '>',
      '#weight' => -3,
    );

    return $form;
  }
}

/**
 * Implements hook_cron().
 *
 * Closes polls that have exceeded their allowed runtime.
 *
 * Закрываем опросы превысившие отведённое им время.
 */
function inner_poll_cron() {
  $query = db_select('inner_poll', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $query->fields('p', array('nid'));
  $query->condition('p.active', 1);
  $query->condition('p.runtime', 0, '<>');
  $query->where('(n.created + p.runtime) < :time', array(':time' => time()));
  $result = $query->execute();

  foreach ($result as $poll) {
    db_update('inner_poll')
      ->fields(array('active' => 0))
      ->condition('nid', $poll->nid)
      ->execute();
  }
}

/**
 * Implements hook_help().
 */
function inner_poll_help($path, $arg) {
  switch ($path) {
    case 'admin/help#inner_poll':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<br><p>' . t('The Inner Poll module can be used to create simple surveys or questionnaires that display cumulative results. A poll is a good way to receive feedback from site users and community members.') . '</p><br>';
      return $output;
  }
}
