<?php

/**
 * @file
 * Dark matter module.
 */

/**
 * Implements hook_permission().
 */
function darkmatter_permission() {
  return array(
    'darkmatter comments' => array(
      'title' => t('Mark comments as darkmatter'),
    ),
  );
}

/**
 * Implements hook_mail().
 */
function darkmatter_mail($key, &$message, $params) {
  $language = $message['language'];
  
  $darkmatter_notify = variable_get('darkmatter_notify');
  
          
  switch ($key) {
    case 'node':
      $message['subject'] = token_replace($darkmatter_notify['node']['subject'], array('node' => $params['node']));
      $message['body'][] = token_replace($darkmatter_notify['node']['body'], array('node' => $params['node']));
    break;
    case 'comment':
      $message['subject'] = token_replace($darkmatter_notify['comment']['subject'], array('node' => $params['node'], 'comment' => $params['comment']));
      $message['body'][] = token_replace($darkmatter_notify['comment']['body'], array('node' => $params['node'], 'comment' => $params['comment']));
    break;
  }
}

/**
 * Implements hook_menu().
 */
function darkmatter_menu() {
  $items['darkmatter/node/nojs/%node'] = array(
    'page callback' => 'darkmatter_node',
    'page arguments' => array(2, 3),
    'access arguments' => array('darkmatter comments'),
    'type' => MENU_CALLBACK,
  );
  
  $items['darkmatter/node/ajax/%node'] = array(
    'page callback' => 'darkmatter_node',
    'page arguments' => array(2, 3),
    'access arguments' => array('darkmatter comments'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );
  
  $items['darkmatter/comment/nojs/%comment'] = array(
    'page callback' => 'darkmatter_comment',
    'page arguments' => array(2, 3),
    'access callback' => 'darkmatter_comment_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  
  $items['darkmatter/comment/ajax/%comment'] = array(
    'page callback' => 'darkmatter_comment',
    'page arguments' => array(2, 3),
    'access callback' => 'darkmatter_comment_access',
    'access arguments' => array(3),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_comment_insert().
 */
function darkmatter_comment_insert($comment) {
  if($comment->pid > 0 ){
    $parent_comment = comment_load($comment->pid);
    if($parent_comment->darkmatter){
      db_update('comment')
        ->fields(array(
          'darkmatter' => 1,
        ))
        ->condition('cid', $comment->cid)
        ->execute();
        return;
    }
  }
  $node = node_load($comment->nid);
  if($node->darkmatter){
    db_update('comment')
      ->fields(array(
        'darkmatter' => 1,
      ))
      ->condition('cid', $comment->cid)
      ->execute();
      return;
  }
}

/**
 * Implements hook_query_TAG_alter()().
 */
function darkmatter_query_node_load_multiple_alter(QueryAlterableInterface $query){
  global $user;

  if(!user_access('darkmatter comments')){
    if(!isset($user->darkmatter) or $user->darkmatter == 0 ){
      $query->condition(db_or()->condition('base.darkmatter', 0)->condition('base.uid', $user->uid));
    }
  }
}

/**
 * Implements hook_query_TAG_alter()().
 */
function darkmatter_query_comment_load_multiple_alter(QueryAlterableInterface $query){
  global $user;

  if(!user_access('darkmatter comments')){
    if(!isset($user->darkmatter) or $user->darkmatter == 0 ){
      $query->condition(db_or()->condition('base.darkmatter', 0)->condition('base.uid', $user->uid));
    }
  }
}

/**
 * Implements hook_query_TAG_alter()().
 */
function darkmatter_query_alttracker_nodes_condition_alter(QueryAlterableInterface $query){
  global $user;

  if(!user_access('darkmatter comments')){
    if(!isset($user->darkmatter) or $user->darkmatter == 0 ){
      $query->condition(db_or()->condition('n.darkmatter', 0)->condition('n.uid', $user->uid));
    }
  }
}

/**
 * Update darkmatter stats by node and all comments
 */
function darkmatter_update_stats_node($op, $uid, $nid){
  if($op){
    db_update('darkmatter_stats')
      ->expression('nodes', 'nodes + 1')
      ->condition('uid', $uid)
      ->execute();
  }else{
    db_update('darkmatter_stats')
      ->expression('nodes', 'nodes - 1')
      ->condition('uid', $uid)
      ->execute();
  }
  
  $comments = db_select('comment', 'c')
    ->fields('c')
    ->condition('nid', $nid)
    ->condition('darkmatter', $op ? 0 : 1)
    ->execute()
    ->fetchAll();

  foreach($comments as $comment){
    darkmatter_update_stats_comment($op, $comment->uid);
  }
  
}

/**
 * Update darkmatter stats by comments
 */
function darkmatter_update_stats_comment($op, $uid){
  if($op){
    db_update('darkmatter_stats')
      ->expression('comments', 'comments + 1')
      ->condition('uid', $uid)
      ->execute();
  }else{
    db_update('darkmatter_stats')
    ->expression('comments', 'comments - 1')
    ->condition('uid', $uid)
    ->execute();
  }
}

/**
 * Mark or remove mark 'darkmatter' from node.
 */
function darkmatter_node($ajax, $node){
  
  // If current state is darkmatter then we a unmark it.
  $darkmatter_status = $node->darkmatter ? 0 : 1;

  db_update('node') // Table name no longer needs {}
  ->fields(array(
    'darkmatter' => $darkmatter_status,
  ))
  ->condition('nid', $node->nid)
  ->execute();
  
  darkmatter_update_stats_node($darkmatter_status, $node->uid, $node->nid);
  
  //update Comments
  db_update('comment')
    ->fields(array(
      'darkmatter' => $darkmatter_status,
    ))
    ->condition('nid', $node->nid)
    ->execute();  
      
  if($darkmatter_status){
    darkmatter_node_notify($node);
    darkmatter_node_comments_notify($node);
  }
  
  $is_ajax = $ajax === 'ajax';

  if ($is_ajax) {
    $commands = array();
    
    $comments = db_select('comment', 'c')
      ->fields('c')
      ->condition('nid', $node->nid)
      ->execute()
      ->fetchAll();
      
    foreach($comments as $comment){
      if($darkmatter_status){
        $commands[] = ajax_command_invoke('.darkmatter-comment-' . $comment->cid, 'addClass', array('darkmatter'));
        $title = t('not darkmatter');
        $link = '<span class="darkmatter-comment-link-' . $comment->cid . '">' . $title . '</span>';
        $commands[] = ajax_command_replace('.darkmatter-comment-link-' . $comment->cid, $link);
      }else{
        $commands[] = ajax_command_invoke('.darkmatter-comment-' . $comment->cid, 'removeClass', array('darkmatter'));
        $title = t('darkmatter');
        $link = l($title, 'darkmatter/comment/nojs/' . $comment->cid, array('attributes' => array('class' => array('use-ajax', 'darkmatter-comment-link-' . $comment->cid))));
        $commands[] = ajax_command_replace('.darkmatter-comment-link-' . $comment->cid, $link);
      }

    }
    
    if($darkmatter_status){
      $commands[] = ajax_command_invoke('#node-' . $node->nid, 'addClass', array('darkmatter'));
      $title = t('not darkmatter');
    }else{
      $commands[] = ajax_command_invoke('#node-' . $node->nid, 'removeClass', array('darkmatter'));
      $title = t('darkmatter');
    }

    $link = l($title, 'darkmatter/node/nojs/' . $node->nid, array('attributes' => array('class' => array('use-ajax', 'darkmatter-node-' . $node->nid))));

    $commands[] = ajax_command_replace('.darkmatter-node-' . $node->nid, $link);
    
    
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }else{
    if($darkmatter_status){
      drupal_set_message(t('Marked as dark matter'));
    }else{
      drupal_set_message(t('It is not a dark matter anymore'));
    }
    drupal_goto();
  }
}

/**
 * Mark or remove mark 'darkmatter' from comment.
 */
function darkmatter_comment($ajax, $comment){
  global $user;
  
  // If current state is darkmatter then we a unmark it.
  $darkmatter_status = $comment->darkmatter ? 0 : 1;

  
  db_update('comment') // Table name no longer needs {}
  ->fields(array(
    'darkmatter' => $darkmatter_status,
  ))
  ->condition('cid', $comment->cid)
  ->execute();
  
  
  $cids = darkmatter_comment_mark_subcomments($comment->cid, $darkmatter_status);
  $cids[] = $comment->cid;

  darkmatter_update_stats_comment($darkmatter_status, $comment->uid);

  $is_ajax = $ajax === 'ajax';

  if ($is_ajax) {
    $commands = array();
    
    foreach($cids as $cid){
      if($darkmatter_status){
        $commands[] = ajax_command_invoke('.darkmatter-comment-' . $cid, 'addClass', array('darkmatter'));
        $title = t('not darkmatter');
      }else{
        $commands[] = ajax_command_invoke('.darkmatter-comment-' . $cid, 'removeClass', array('darkmatter'));
        $title = t('darkmatter');
      }
      
      if(!user_access('darkmatter comments') and !$user->darkmatter ){
        $title = t('Comment marked as darkmatter.');
        $replace_comment = '<div class="comment comment-removed bg-danger darkmatter-comment-link-' . $cid . '"> <p>' . $title. '</p></div>';
        $commands[] = ajax_command_replace('.darkmatter-comment-' . $cid, $replace_comment);
        
      }else{
        $link = l($title, 'darkmatter/comment/nojs/' . $cid, array('attributes' => array('class' => array('use-ajax', 'darkmatter-comment-link-' . $cid))));
        $commands[] = ajax_command_replace('.darkmatter-comment-link-' . $cid, $link);
      }
    }

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }else{
    if($darkmatter_status){
      drupal_set_message(t('Marked as dark matter'));
    }else{
      drupal_set_message(t('It is not a dark matter anymore'));
    }
    drupal_goto();
  }
}

/**
 * Mark all child comments as darkmatter
 */
function darkmatter_comment_mark_subcomments($cid, $darkmatter){
  $cids = array();
  
  db_update('comment') // Table name no longer needs {}
    ->fields(array(
      'darkmatter' => $darkmatter,
    ))
    ->condition('pid', $cid)
    ->execute();
  
  darkmatter_comment_notify($cid);
  
  $subcomments = db_select('comment', 'c')
    ->fields('c')
    ->condition('pid', $cid)
    ->execute()
    ->fetchAll();
    
  foreach($subcomments as $subcomment){
    $cids[] = $subcomment->cid;
    darkmatter_update_stats_comment($darkmatter, $subcomment->uid);
    $subcids = darkmatter_comment_mark_subcomments($subcomment->cid, $darkmatter);
    $cids = array_merge($cids, $subcids);
  }
  return $cids;
}

/**
 * Send notification to author that node marked as darkmatter.
 */
function darkmatter_node_notify($node){
  $darkmatter_notify = variable_get('darkmatter_notify');
  if($darkmatter_notify['notify']){
    $account = user_load($node->uid);
    
    $params = array(
      'node' => $node,
    );
    drupal_mail('darkmatter', 'node', $account->mail, language_default(), $params, FALSE);
  }
}

/**
 * Notify all comments about marked as darkmatter.
 */
function darkmatter_node_comments_notify($node){
  
  $comments = db_select('comment', 'c')
    ->fields('c')
    ->condition('nid', $node->nid)
    ->execute()
    ->fetchAll();
  foreach($comments as $comment){
    darkmatter_comment_notify($comment->cid);
  }
}


/**
 * Send notification to author that comment marked as darkmatter.
 */
function darkmatter_comment_notify($cid){
  $darkmatter_notify = variable_get('darkmatter_notify');
  if($darkmatter_notify['notify']){
    $comment = comment_load($cid);
    $account = user_load($comment->uid);
    $node = node_load($comment->nid);
    $params = array(
      'comment' => $comment,
      'node' => $node,
    );
    drupal_mail('darkmatter', 'comment', $account->mail, language_default(), $params, FALSE);
  }
}

/**
 * Implements hook_node_view().
 */
function darkmatter_node_view($node, $view_mode) {
  global $user;
  drupal_add_library('system', 'drupal.ajax');
  
  if(user_access('darkmatter comments')){
    $node->content['links']['comment']['#links']['darkmatter-link'] = array(
      'title' => $node->darkmatter ? t('not darkmatter') : t('darkmatter'),
      'href' => "darkmatter/node/nojs/" . $node->nid,
      'query' => drupal_get_destination(),
      'attributes' => array(
        'title' => $node->darkmatter ?  t('It is not dark matter!'): t('Mark this content as dark matter.'),
        'class' => array('use-ajax', 'darkmatter-node-' . $node->nid),
      ),
    );
  }
  if(isset($user->darkmatter) && $user->darkmatter){
    $result = db_select('comment', 'c')
        ->fields('c')
        ->condition('darkmatter', 1)
        ->condition('nid', $node->nid)
        ->execute();
    $darkmatter_count = $result->rowCount();
    if($darkmatter_count > 0 && isset($node->content['links']['comment']['#links']['comment-comments']['title'])){
      $node->content['links']['comment']['#links']['comment-comments']['title'] = $darkmatter_count . '/' . $node->content['links']['comment']['#links']['comment-comments']['title'];
    }
  }
}

/**
 * Implements hook_node_view().
 */
function darkmatter_comment_view($comment, $view_mode, $langcode) {
  drupal_add_library('system', 'drupal.ajax');
  
  if(darkmatter_comment_access($comment)){
    if(darkmatter_node_status($comment->nid)){
      $comment->content['links']['comment']['#links']['darkmatter-link'] = array(
        'title' => t('not darkmatter'),
        'html' => TRUE,
        'attributes' => array(
          'class' => array('darkmatter-comment-link-' . $comment->cid),
        ),
      );
    }
    else {
      $comment->content['links']['comment']['#links']['darkmatter-link'] = array(
        'title' => $comment->darkmatter ? t('not darkmatter') : t('darkmatter'),
        'href' => "darkmatter/comment/nojs/" . $comment->cid,
        'query' => drupal_get_destination(),
        'attributes' => array(
          'title' => $comment->darkmatter ?  t('It is not dark matter!'): t('Mark this content as dark matter.'),
          'class' => array('use-ajax', 'darkmatter-comment-link-' . $comment->cid),
        ),
      );
    }
  }
}

/**
 * Get node status by NID.
 */
function darkmatter_node_status($nid){
  static $nodes;
  if(!isset($nodes[$nid])){
    $node = db_select('node', 'n')
      ->fields('n')
      ->condition('nid', $nid)
      ->execute()
      ->fetchAssoc();
    $nodes[$nid] = $node['darkmatter'];
  }
  return $nodes[$nid];
}

/**
 * Menu access callback to check permissions.
 */
function darkmatter_comment_access($comment){
  global $user;

  if(user_access('darkmatter comments')){
    return TRUE;
  }

  static $nodes;
  if(!isset($nodes[$comment->nid])){
    $node = db_select('node', 'n')
      ->fields('n')
      ->condition('nid', $comment->nid)
      ->execute()
      ->fetchAssoc();
    $nodes[$comment->nid] = $node['uid'];
  }

  if($nodes[$comment->nid] == $user->uid){
    return TRUE;
  }
  
  return FALSE;
}


/**
 * Implements hook_preprocess_comment().
 *
 * Add class darkmatter to comment when applicable.
 */ 
function darkmatter_preprocess_comment(&$variables) {
  $comment = $variables['comment'];
  if($comment->darkmatter){
    $variables['classes_array'][] = 'darkmatter';
  }
  $variables['classes_array'][] = 'darkmatter-comment-' . $comment->cid;
}

/**
 * Implements hook_preprocess_node().
 *
 * Add class darkmatter to node when applicable.
 */
function darkmatter_preprocess_node(&$variables) {
  $node = $variables['node'];
  if($node->darkmatter){
    $variables['classes_array'][] = 'darkmatter';
  }
}

/**
 * Implements hook_FROM_ID_form_alter().
 *
 * Add settings to see darkmatter.
 */
function darkmatter_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if($term_nid = variable_get('darkmatter_term_nid', FALSE)){
    $title = t('I agree with !link', array('!link' => l('Dark Matter term and conditions!', 'node/' . $term_nid)));
  }else{
    $title = t('I Agree with Dark Matter term and conditions!');
  }

  $account = $form_state['user'];
  $form['darkmatter'] = array(
    '#type' => 'checkbox',
    '#title' => $title,
    '#default_value' => $account->darkmatter,
  );
}

/**
 * Implements hook_user_view().
 */
function darkmatter_user_view($account, $view_mode) {
  $darkmatter_stats = darkmatter_stats($account->uid);
  
  $account->content['summary']['darkmatter'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Dark matter'),
    '#markup' => t('Nodes: !dark_node/!total_node, comments: !dark_comment/!total_comment', array(
      '!dark_node' => $darkmatter_stats->nodes,
      '!total_node' => $darkmatter_stats->total_nodes,
      '!dark_comment' => $darkmatter_stats->comments,
      '!total_comment' => $darkmatter_stats->total_comments,
    )),
  );
}

/**
 * Implements hook_node_load().
 */
function darkmatter_node_load($nodes, $types) {
  global $user;
  foreach ($nodes as $node) {
    if(isset($user->darkmatter) && !$user->darkmatter && isset($node->comment_count)){
      // We need to hide darkmatter comment counters
      $result = db_select('comment', 'c')
        ->fields('c')
        ->condition('darkmatter', 0)
        ->condition('nid', $node->nid)
        ->execute();
      $node->comment_count = $result->rowCount();
      
    }
  }
}

/**
 * Return user dark matter stats
 */
function darkmatter_stats($uid){

  $darkmatter_stats = db_select('darkmatter_stats', 'ds')
    ->fields('ds')
    ->condition('uid', $uid)
    ->execute()
    ->fetchObject();
    
  $result = db_select('comment', 'c')
    ->fields('c')
    ->condition('uid', $uid)
    ->execute();

  $darkmatter_stats->total_comments = $result->rowCount();

  $result = db_select('node', 'n')
    ->fields('n')
    ->condition('uid', $uid)
    ->execute();

  $darkmatter_stats->total_nodes = $result->rowCount();

  return $darkmatter_stats;
}

/**
* Implements of hook_form_alter().
*/
function darkmatter_form_alter(&$form, &$form_state, $form_id){
  if($form['#form_id'] == 'user_admin_settings'){
    $default = variable_get('darkmatter_notify');
    $form['darkmatter'] = array();
    $form['darkmatter']['#type'] = 'fieldset';
    $form['darkmatter']['#collapsible'] = TRUE;
    $form['darkmatter']['#collapsed'] = FALSE;
    $form['darkmatter']['#group'] = 'email';
    $form['darkmatter']['#title'] = t('Darkmatter notification');
    $form['darkmatter']['#description'] = t('Edit Email message sent to the user when node or comment marked as darkmatter');
    $form['darkmatter']['darkmatter_notify'] = array(
      '#type' => 'checkbox',
      '#title' => t('Notify the user when node or comment marked as darkmatter.'),
      '#default_value' => $default['notify'],
    );
    $form['darkmatter']['settings'] = array(
      '#type' => 'container',
      '#states' => array(
        'invisible' => array(
          'input[name="darkmatter_notify"]' => array('checked' => FALSE),
        ),
      ),
    );
    $form['darkmatter']['settings']['node'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node settings'),
      '#tree' => TRUE,
    );
    $form['darkmatter']['settings']['node']['subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => $default['node']['subject'],
      '#maxlength' => 180,
    );
    $form['darkmatter']['settings']['node']['body'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => $default['node']['body'],
      '#rows' => 15,
    );
    $form['darkmatter']['settings']['comment'] = array(
      '#type' => 'fieldset',
      '#title' => t('Comment settings'),
      '#tree' => TRUE,
    );
    $form['darkmatter']['settings']['comment']['subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => $default['comment']['subject'],
      '#maxlength' => 180,
    );
    $form['darkmatter']['settings']['comment']['body'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => $default['comment']['body'],
      '#rows' => 15,
    );
    $form['darkmatter']['token']['#type'] = 'fieldset';
    $form['darkmatter']['token']['#collapsible'] = FALSE;
    $form['darkmatter']['token']['#collapsed'] = FALSE;
    $form['darkmatter']['token']['tokens'] = array(
      '#theme' => 'token_tree_link',
      '#token_types' => array('node', 'comment', 'user'),
      '#global_types' => TRUE,
      '#click_insert' => TRUE,
    );
    $form['darkmatter']['#weight'] = 0;
    $form['#submit'][] = 'darkmatter_form_submit';
  }
}

function darkmatter_form_submit($form, &$form_state){
  $darkmatter_notify = array(
    'notify' => $form_state['values']['darkmatter_notify'],
    'node' => $form_state['values']['node'],
    'comment' => $form_state['values']['comment'],
  );
  variable_set('darkmatter_notify', $darkmatter_notify);
}
